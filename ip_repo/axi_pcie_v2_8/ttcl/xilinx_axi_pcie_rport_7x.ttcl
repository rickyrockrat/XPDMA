<#: ttcl/GetValueSimParam.ttcl :>
<: if {$ep} ttcl_return :>
<: setFileName  "xilinx_axi_pcie_rport_7x" :>
<: setFileExtension ".v" :>
<: setOutputDirectory [ttcl_string_concat $ComponentName "/example_design"] :>
<#: ttcl/header.ttcl :>
///-----------------------------------------------------------------------------
`timescale 1ns/1ns

module xilinx_axi_pcie_rport_7x  #(
  parameter PL_FAST_TRAIN       = "FALSE", // Simulation Speedup
  parameter PCIE_EXT_CLK        = "<=: print $pcie_ext_clk_string :>",  // Use External Clocking Module
  parameter PCIE_EXT_GT_COMMON  = "<=: print $pcie_ext_gt_common_string :>",
  parameter REF_CLK_FREQ        = <=: print $pci_exp_ref_freq_int :>,
  parameter C_DATA_WIDTH        = <=: print $pcie_axi_if_wdt_int :>, // RX/TX interface data width
  parameter KEEP_WIDTH          = C_DATA_WIDTH / 8
) (

  output  [<=: expr {$max_lnk_wdt_int - 1} :>:0]    pci_exp_txp,
  output  [<=: expr {$max_lnk_wdt_int - 1} :>:0]    pci_exp_txn,
  input   [<=: expr {$max_lnk_wdt_int - 1} :>:0]    pci_exp_rxp,
  input   [<=: expr {$max_lnk_wdt_int - 1} :>:0]    pci_exp_rxn,

<: if {($ext_pipe_interface_string == "TRUE")} { :>
    // synthesis translate_off
  //----------------------------------------------------------------------------------------------------------------//
  // PIPE PORTS to TOP Level For PIPE SIMULATION with 3rd Party IP/BFM/Xilinx BFM
  //----------------------------------------------------------------------------------------------------------------//
    input wire   [11:0]  common_commands_in,
    input wire   [24:0]  pipe_rx_0_sigs,
    input wire   [24:0]  pipe_rx_1_sigs,
    input wire   [24:0]  pipe_rx_2_sigs,
    input wire   [24:0]  pipe_rx_3_sigs,
    input wire   [24:0]  pipe_rx_4_sigs,
    input wire   [24:0]  pipe_rx_5_sigs,
    input wire   [24:0]  pipe_rx_6_sigs,
    input wire   [24:0]  pipe_rx_7_sigs,

    output wire  [11:0]  common_commands_out,
    output wire  [24:0]  pipe_tx_0_sigs,
    output wire  [24:0]  pipe_tx_1_sigs,
    output wire  [24:0]  pipe_tx_2_sigs,
    output wire  [24:0]  pipe_tx_3_sigs,
    output wire  [24:0]  pipe_tx_4_sigs,
    output wire  [24:0]  pipe_tx_5_sigs,
    output wire  [24:0]  pipe_tx_6_sigs,
    output wire  [24:0]  pipe_tx_7_sigs,
    // synthesis translate_on
<: } :>



  input                                       sys_clk_p,
  input                                       sys_clk_n,
  input                                       sys_rst_n
);

wire axi_aclk_out;
wire axi_ctl_aclk_out;
wire m_axi_awlock;
wire m_axi_awvalid;	
wire m_axi_awready;	
wire m_axi_wlast  ;      
wire m_axi_wvalid ;      
wire m_axi_wready ;      
wire m_axi_bvalid ;      
wire m_axi_bready ;      
wire m_axi_arlock ;      
wire m_axi_arvalid;	
wire m_axi_arready;	
wire m_axi_rlast  ;      
wire m_axi_rvalid ;      
wire m_axi_rready ; 

wire [7 : 0] 	m_axi_awlen;
wire [2 : 0] 	m_axi_awsize;
wire [2 : 0] 	m_axi_awprot;
wire [2 : 0] 	m_axi_arprot;
wire [3 : 0] 	m_axi_awcache;
wire [3 : 0] 	m_axi_arcache;
wire [1 : 0] 	m_axi_awburst;
wire [1 : 0] 	bresp;
wire [1 : 0] 	rresp;
wire [(C_DATA_WIDTH - 1) : 0]	m_axi_wdata;
wire [(C_DATA_WIDTH - 1) : 0]	rdata;
localparam PL_LINK_CAP_MAX_LINK_WIDTH = <=: print $max_lnk_wdt_int :>;
localparam PL_LINK_CAP_MAX_LINK_SPEED = <=: expr {$max_lnk_spd_int + 1} :>;
wire [(KEEP_WIDTH -1) : 0]	m_axi_wstrb;
wire [7 : 0] 	m_axi_arlen;
wire [2 : 0] 	m_axi_arsize;
wire [1 : 0] 	m_axi_arburst;

wire [1 : 0] 	m_axi_bresp = bresp[1:0];
wire [1 : 0] 	m_axi_rresp = rresp[1:0];
wire [7 : 0] 	awlen =   m_axi_awlen	[7 : 0] ;
wire [2 : 0] 	awsize= m_axi_awsize	[2 : 0] ;
wire [2 : 0] 	awprot= m_axi_awprot	[2 : 0] ;
wire [2 : 0] 	arprot= m_axi_arprot	[2 : 0] ;
wire [3 : 0] 	awcache= m_axi_awcache	[3 : 0] ;
wire [3 : 0] 	arcache= m_axi_arcache	[3 : 0] ;
wire [1 : 0] 	awburst=m_axi_awburst	[1 : 0] ;
wire [(C_DATA_WIDTH -1) : 0]	wdata=  m_axi_wdata	[(C_DATA_WIDTH -1) : 0];
wire [(C_DATA_WIDTH -1) : 0]	m_axi_rdata=  rdata	[(C_DATA_WIDTH -1) : 0];
wire [(KEEP_WIDTH -1) : 0]	wstrb=  m_axi_wstrb	[(KEEP_WIDTH -1) : 0] ;
wire [7 : 0] 	arlen=  m_axi_arlen	[7 : 0] ;
wire [2 : 0] 	arsize= m_axi_arsize	[2 : 0] ;
wire [1 : 0] 	arburst=m_axi_arburst	[1 : 0] ;

wire [31:0]  m_axi_araddr;
wire [31:0]  m_axi_awaddr;
<: if {$pcie_axi_if_wdt_int == 128} { :>
wire       [14:0]    awaddr = m_axi_awaddr[14:0];
wire       [14:0]    araddr = m_axi_araddr[14:0];
<: } else { :>
wire       [13:0]    awaddr = m_axi_awaddr[13:0];
wire       [13:0]    araddr = m_axi_araddr[13:0];
<: } :>
 //-------------------------------------------------------
wire [31:0]  s_axi_araddr;
wire [31:0]  s_axi_awaddr;
wire [1 : 0] 	s_axi_arburst;
wire [7 : 0] 	s_axi_arlen;
wire [2 : 0] 	s_axi_arsize;
wire [1 : 0] 	s_axi_awburst;
wire [7 : 0] 	s_axi_awlen;
wire [2 : 0] 	s_axi_awsize;
wire            s_axi_awvalid;
wire            s_axi_awready;
wire            s_axi_wlast;
wire            s_axi_wvalid;
wire            s_axi_wready;
wire            s_axi_bvalid;
wire            s_axi_bready;
wire            s_axi_arvalid;
wire            s_axi_arready;
wire            s_axi_rlast;
wire            s_axi_rvalid;
wire            s_axi_rready;
wire            configs_completed;
wire            pio_test_completed;
wire            pio_test_failed;

wire [(C_DATA_WIDTH - 1) : 0]	s_axi_wdata;
wire [(C_DATA_WIDTH - 1) : 0]	s_axi_rdata;
wire [(KEEP_WIDTH -1) : 0]	s_axi_wstrb;
wire [(KEEP_WIDTH -1) : 0]	s_axi_rstrb;
wire [1 : 0] 	s_axi_bresp;
wire [1 : 0] 	s_axi_rresp;
     
wire [31 : 0] 	s_axi_ctl_awaddr;
wire  		s_axi_ctl_awvalid;
wire  		s_axi_ctl_awready;
wire [31 : 0] 	s_axi_ctl_wdata;
wire [3 : 0] 	s_axi_ctl_wstrb;
wire  		s_axi_ctl_wvalid;
wire  		s_axi_ctl_wready;
wire  		s_axi_ctl_wlast;
wire  		s_axi_ctl_bvalid;
wire  		s_axi_ctl_bready;
wire [1 : 0]    s_axi_ctl_bresp;
wire [31 : 0] 	s_axi_ctl_araddr;
wire  		s_axi_ctl_arvalid;
wire  		s_axi_ctl_arready;
wire [31 : 0] 	s_axi_ctl_rdata;
wire [1 : 0]    s_axi_ctl_rresp;
wire  		s_axi_ctl_rvalid;
wire  		s_axi_ctl_rready;
 //-------------------------------------------------------
  // 5. External Channel DRP Interface
  //-------------------------------------------------------
//  wire                                                    ext_ch_gt_drpclk;
  wire        [<=: expr {($max_lnk_wdt_int*9)-1} :>:0]  ext_ch_gt_drpaddr;
  wire        [<=: expr {($max_lnk_wdt_int)-1} :>:0]    ext_ch_gt_drpen;
  wire        [<=: expr {($max_lnk_wdt_int*16)-1}:>:0]  ext_ch_gt_drpdi;
  wire        [<=: expr {($max_lnk_wdt_int)-1} :>:0]    ext_ch_gt_drpwe;
 //--------------------Tie-off's for EXT GT Channel DRP ports----------------------------//
//  assign        ext_ch_gt_drpclk=1'b0;
  assign        ext_ch_gt_drpaddr = <=: expr {($max_lnk_wdt_int*9)} :>'d0;
  assign        ext_ch_gt_drpen=<=: expr {($max_lnk_wdt_int)} :>'d0;
  assign        ext_ch_gt_drpdi=<=: expr {($max_lnk_wdt_int*16)}:>'d0;
  assign        ext_ch_gt_drpwe=<=: expr {($max_lnk_wdt_int)} :>'d0;


  wire  [11:0]  common_commands_in_i;
  wire  [24:0]  pipe_rx_0_sigs_i;
  wire  [24:0]  pipe_rx_1_sigs_i;
  wire  [24:0]  pipe_rx_2_sigs_i;
  wire  [24:0]  pipe_rx_3_sigs_i;
  wire  [24:0]  pipe_rx_4_sigs_i;
  wire  [24:0]  pipe_rx_5_sigs_i;
  wire  [24:0]  pipe_rx_6_sigs_i;
  wire  [24:0]  pipe_rx_7_sigs_i;

<: if {($ext_pipe_interface_string == "TRUE")} { :>
  wire  [11:0]  common_commands_out_i;
  wire  [24:0]  pipe_tx_0_sigs_i;
  wire  [24:0]  pipe_tx_1_sigs_i;
  wire  [24:0]  pipe_tx_2_sigs_i;
  wire  [24:0]  pipe_tx_3_sigs_i;
  wire  [24:0]  pipe_tx_4_sigs_i;
  wire  [24:0]  pipe_tx_5_sigs_i;
  wire  [24:0]  pipe_tx_6_sigs_i;
  wire  [24:0]  pipe_tx_7_sigs_i;

    // synthesis translate_off
  assign common_commands_in_i = common_commands_in;  
  assign pipe_rx_0_sigs_i     = pipe_rx_0_sigs;   
  assign pipe_rx_1_sigs_i     = pipe_rx_1_sigs;   
  assign pipe_rx_2_sigs_i     = pipe_rx_2_sigs;   
  assign pipe_rx_3_sigs_i     = pipe_rx_3_sigs;   
  assign pipe_rx_4_sigs_i     = pipe_rx_4_sigs;   
  assign pipe_rx_5_sigs_i     = pipe_rx_5_sigs;   
  assign pipe_rx_6_sigs_i     = pipe_rx_6_sigs;   
  assign pipe_rx_7_sigs_i     = pipe_rx_7_sigs;   
  assign common_commands_out  = common_commands_out_i; 
  assign pipe_tx_0_sigs       = pipe_tx_0_sigs_i;      
  assign pipe_tx_1_sigs       = pipe_tx_1_sigs_i;      
  assign pipe_tx_2_sigs       = pipe_tx_2_sigs_i;      
  assign pipe_tx_3_sigs       = pipe_tx_3_sigs_i;      
  assign pipe_tx_4_sigs       = pipe_tx_4_sigs_i;      
  assign pipe_tx_5_sigs       = pipe_tx_5_sigs_i;      
  assign pipe_tx_6_sigs       = pipe_tx_6_sigs_i;      
  assign pipe_tx_7_sigs       = pipe_tx_7_sigs_i;      
    // synthesis translate_on
<: } else { :>
  assign common_commands_in_i = 12'h0;  
  assign pipe_rx_0_sigs_i     = 25'h0;
  assign pipe_rx_1_sigs_i     = 25'h0;
  assign pipe_rx_2_sigs_i     = 25'h0;
  assign pipe_rx_3_sigs_i     = 25'h0;
  assign pipe_rx_4_sigs_i     = 25'h0;
  assign pipe_rx_5_sigs_i     = 25'h0;
  assign pipe_rx_6_sigs_i     = 25'h0;
  assign pipe_rx_7_sigs_i     = 25'h0;
<: } :>

  //-------------------------------------------------------
  reg pipe_mmcm_rst_n = 1'b1;


  wire sys_rst_n_c;
  wire sys_clk;

// Local Parameters
  localparam                                  TCQ = 1;

<: if {[ends_with $prj_fam "zynq"] && [starts_with $prj_spd_grd "-1"]} { :>
<: if {$max_lnk_wdt_int == 1 || ($max_lnk_wdt_int == 2 && $max_lnk_spd_int == 0)} { :>
<: if {$pcie_axi_if_wdt_int == 128}  { :>
  localparam USER_CLK_FREQ = 2;
<: } else { :>
  localparam USER_CLK_FREQ = 1;
<: } :>
<: } else { :>
<: if {$pcie_axi_if_wdt_int == 128}  { :>
  localparam USER_CLK_FREQ = 3;
<: } else { :>
  localparam USER_CLK_FREQ = 2;
<: } :>
<: } :>
<: } else { :>
<: if {$pcie_axi_if_wdt_int == 128}  { :>
  localparam USER_CLK_FREQ = 3;
<: } elseif {$max_lnk_spd_int == 0 && $max_lnk_wdt_int == 1}  { :>
  localparam USER_CLK_FREQ = 1; 
<: } else { :>
  localparam USER_CLK_FREQ = 2; 
<: } :>
<: } :>
<: if {$pcie_axi_if_wdt_int == 128}  { :>
  localparam USER_CLK2_DIV2 = "TRUE";
<: } else { :>
  localparam USER_CLK2_DIV2 = "FALSE";
<: } :>
  localparam USERCLK2_FREQ   =  (USER_CLK2_DIV2 == "FALSE") ? USER_CLK_FREQ : 
                                                             (USER_CLK_FREQ == 4) ? 3 :
                                                             (USER_CLK_FREQ == 3) ? 2 :
                                                             (USER_CLK_FREQ == 2) ? 1 :
                                                              USER_CLK_FREQ;


  IBUF   sys_reset_n_ibuf (.O(sys_rst_n_c), .I(sys_rst_n));
  IBUFDS_GTE2 refclk_ibuf (.O(sys_clk), .ODIV2(), .I(sys_clk_p), .CEB(1'b0), .IB(sys_clk_n));

  // Synchronize Reset
  wire mmcm_lock;
  reg axi_aresetn;
(* ASYNC_REG = "TRUE" *)  reg sys_rst_n_reg;
(* ASYNC_REG = "TRUE" *)  reg sys_rst_n_reg2;
  
  always @ (posedge axi_aclk_out or negedge sys_rst_n_c) begin
  
      if (!sys_rst_n_c) begin
      
          sys_rst_n_reg  <= #TCQ 1'b0;
          sys_rst_n_reg2 <= #TCQ 1'b0;
          
      end else begin
      
          sys_rst_n_reg  <= #TCQ 1'b1;
          sys_rst_n_reg2 <= #TCQ sys_rst_n_reg;
          
      end
      
  end
  
  always @ (posedge axi_aclk_out) begin
      
      if (sys_rst_n_reg2 && mmcm_lock) begin
      
          axi_aresetn <= #TCQ 1'b1;
          
      end else begin
      
          axi_aresetn <= #TCQ 1'b0;
          
      end
  
  end

  //
  // Simulation endpoint without CSL
  //

<: if {$pcie_ext_gt_common_string == "FALSE" && $pcie_ext_clk_string == "FALSE"}  { :>

<: print [ttcl_string_concat $ComponentName " "] :>   <: print $ComponentName :>_i
 (
<: if {($axi_aclk_loopback_string == "TRUE")} { :>
  .axi_aclk		(axi_aclk_out),		
  .axi_ctl_aclk		(axi_ctl_aclk_out),
<: } :>
  .axi_aresetn		(axi_aresetn),
  .axi_aclk_out		(axi_aclk_out),
  .axi_ctl_aclk_out	(axi_ctl_aclk_out),	
  .mmcm_lock		(mmcm_lock),	
  .interrupt_out	(),	
  .INTX_MSI_Request	(1'b0),	
  .INTX_MSI_Grant	(),	
  .MSI_enable		(),	
  .MSI_Vector_Num	(5'b0),	
  .MSI_Vector_Width	(),		
  .s_axi_awid		(4'b0),	
  .s_axi_awaddr		(s_axi_awaddr),	
  .s_axi_awregion	(4'b0),		
  .s_axi_awlen		(s_axi_awlen),	
  .s_axi_awsize		(s_axi_awsize),		
  .s_axi_awburst	(s_axi_awburst),			
  .s_axi_awvalid	(s_axi_awvalid),		
  .s_axi_awready	(s_axi_awready),		
  .s_axi_wdata		(s_axi_wdata),		
  .s_axi_wstrb		(s_axi_wstrb),			
  .s_axi_wlast		(s_axi_wlast),		
  .s_axi_wvalid		(s_axi_wvalid),		
  .s_axi_wready		(s_axi_wready),		
  .s_axi_bid		(),	
  .s_axi_bresp		(s_axi_bresp),	
  .s_axi_bvalid		(s_axi_bvalid),		
  .s_axi_bready		(s_axi_bready),		
  .s_axi_arid		(4'b0),		
  .s_axi_araddr		(s_axi_araddr[31:0]),		
  .s_axi_arregion	(4'b0),		
  .s_axi_arlen		(s_axi_arlen[7:0]),	
  .s_axi_arsize		(s_axi_arsize[2:0]),		
  .s_axi_arburst	(s_axi_arburst[1:0]),
  .s_axi_arvalid	(s_axi_arvalid),
  .s_axi_arready	(s_axi_arready),
  .s_axi_rid		(),
  .s_axi_rdata		(s_axi_rdata),	
  .s_axi_rresp		(s_axi_rresp),
  .s_axi_rlast		(s_axi_rlast),
  .s_axi_rvalid		(s_axi_rvalid),
  .s_axi_rready		(s_axi_rready),
  .m_axi_awaddr		(m_axi_awaddr),
  .m_axi_awlen		(m_axi_awlen	),
  .m_axi_awsize		(m_axi_awsize	),
  .m_axi_awburst	(m_axi_awburst),
  .m_axi_awprot		(m_axi_awprot	),
  .m_axi_awvalid	(m_axi_awvalid),
  .m_axi_awready	(m_axi_awready),	
  .m_axi_awlock		(m_axi_awlock	),
  .m_axi_awcache	(m_axi_awcache),
  .m_axi_wdata		(m_axi_wdata	),
  .m_axi_wstrb		(m_axi_wstrb	),
  .m_axi_wlast		(m_axi_wlast	),
  .m_axi_wvalid		(m_axi_wvalid	),
  .m_axi_wready		(m_axi_wready	),
  .m_axi_bresp		(m_axi_bresp	),
  .m_axi_bvalid		(m_axi_bvalid	),
  .m_axi_bready		(m_axi_bready	),
  .m_axi_araddr		(m_axi_araddr	),
  .m_axi_arlen		(m_axi_arlen	),
  .m_axi_arsize		(m_axi_arsize	),
  .m_axi_arburst	(m_axi_arburst),
  .m_axi_arprot		(m_axi_arprot	),
  .m_axi_arvalid	(m_axi_arvalid),
  .m_axi_arready	(m_axi_arready),
  .m_axi_arlock		(m_axi_arlock	),
  .m_axi_arcache	(m_axi_arcache),       
  .m_axi_rdata		(m_axi_rdata	),
  .m_axi_rresp		(m_axi_rresp	),
  .m_axi_rlast		(m_axi_rlast	),
  .m_axi_rvalid		(m_axi_rvalid	),
  .m_axi_rready		(m_axi_rready	),
  .pci_exp_txp          ( pci_exp_txp ),
  .pci_exp_txn          ( pci_exp_txn ),
  .pci_exp_rxp          ( pci_exp_rxp ),
  .pci_exp_rxn          ( pci_exp_rxn ),
  .REFCLK		(sys_clk),
  .s_axi_ctl_awaddr	(s_axi_ctl_awaddr),
  .s_axi_ctl_awvalid	(s_axi_ctl_awvalid),
  .s_axi_ctl_awready	(s_axi_ctl_awready),
  .s_axi_ctl_wdata	(s_axi_ctl_wdata),
  .s_axi_ctl_wstrb	(s_axi_ctl_wstrb),
  .s_axi_ctl_wvalid	(s_axi_ctl_wvalid),
  .s_axi_ctl_wready	(s_axi_ctl_wready),
  .s_axi_ctl_bresp	(s_axi_ctl_bresp),
  .s_axi_ctl_bvalid	(s_axi_ctl_bvalid),
  .s_axi_ctl_bready	(s_axi_ctl_bready),
  .s_axi_ctl_araddr	(s_axi_ctl_araddr),
  .s_axi_ctl_arvalid	(s_axi_ctl_arvalid),
  .s_axi_ctl_arready	(s_axi_ctl_arready),
  .s_axi_ctl_rdata	(s_axi_ctl_rdata),
  .s_axi_ctl_rresp	(s_axi_ctl_rresp),
  .s_axi_ctl_rvalid	(s_axi_ctl_rvalid),

<: if {($ext_ch_gt_drp_string == "TRUE")} { :>
 //------------TRANSCEIVER DEBUG-----------------------------------
 //Drive these inputs to 0s
  .ext_ch_gt_drpclk     (),
  .ext_ch_gt_drpaddr    (ext_ch_gt_drpaddr),
  .ext_ch_gt_drpen      (ext_ch_gt_drpen),
  .ext_ch_gt_drpdi      (ext_ch_gt_drpdi),
  .ext_ch_gt_drpwe      (ext_ch_gt_drpwe),
  .ext_ch_gt_drpdo      ( ),
  .ext_ch_gt_drprdy     ( ),
<: } :>
<: if {($transceiver_ctrl_status_ports_string == "TRUE")} { :>
  .pipe_txprbssel       (3'b0),
  .pipe_rxprbssel       (3'b0),
  .pipe_txprbsforceerr  (1'b0),
  .pipe_rxprbscntreset  (1'b0),
  .pipe_loopback        (3'b0),
  .pipe_txinhibit( <=: expr {$max_lnk_wdt_int} :>'b0),
  .pipe_rxprbserr       ( ),
  .pipe_rst_fsm         (),
  .pipe_qrst_fsm        (),
  .pipe_rate_fsm        (),
  .pipe_sync_fsm_tx     (),
  .pipe_sync_fsm_rx     (),
  .pipe_drp_fsm         (),
  .pipe_rst_idle        (),
  .pipe_qrst_idle       (),
  .pipe_rate_idle       (),
  .pipe_eyescandataerror         (),
  .pipe_rxstatus	   (),
  .pipe_dmonitorout    	   (),
  .pipe_cpll_lock                             (),  
  .pipe_qpll_lock                             (),     
  .pipe_rxpmaresetdone                        (),         
  .pipe_rxbufstatus                           (),            
  .pipe_txphaligndone                         (),           
  .pipe_txphinitdone                          (),            
  .pipe_txdlysresetdone                       (),        
  .pipe_rxphaligndone                         (),           
  .pipe_rxdlysresetdone                       (),         
  .pipe_rxsyncdone                            (),            
  .pipe_rxdisperr                             (),          
  .pipe_rxnotintable                          (),          
  .pipe_rxcommadet                            (),               
  .gt_ch_drp_rdy                              (),
  .pipe_debug_0                               (),
  .pipe_debug_1                               (),
  .pipe_debug_2                               (),
  .pipe_debug_3                               (),
  .pipe_debug_4                               (),
  .pipe_debug_5                               (),
  .pipe_debug_6                               (),
  .pipe_debug_7                               (),
  .pipe_debug_8                               (),
  .pipe_debug_9                               (),
  .pipe_debug                                 (),
<: } :>
<: if {($ext_pipe_interface_string == "TRUE")} { :>
      .common_commands_in	(12'b0	),
      .pipe_rx_0_sigs		(25'b0	),
      .pipe_rx_1_sigs		(25'b0	),
      .pipe_rx_2_sigs		(25'b0	),
      .pipe_rx_3_sigs		(25'b0	),
      .pipe_rx_4_sigs		(25'b0	),
      .pipe_rx_5_sigs		(25'b0	),
      .pipe_rx_6_sigs		(25'b0	),
      .pipe_rx_7_sigs		(25'b0	),
      .common_commands_out	(),
      .pipe_tx_0_sigs		(),
      .pipe_tx_1_sigs		(),
      .pipe_tx_2_sigs		(),
      .pipe_tx_3_sigs		(),
      .pipe_tx_4_sigs		(),
      .pipe_tx_5_sigs		(),
      .pipe_tx_6_sigs		(),
      .pipe_tx_7_sigs		(),
<: } :>
<: if {($shared_logic_in_core_string == "TRUE")} { :>
  .int_pclk_out_slave		(		), 
  .int_rxusrclk_out		(		),   
  .int_rxoutclk_out		(		),   
  .int_dclk_out  		(		),       
  .int_userclk1_out		(		),   
  .int_userclk2_out		(		),   
  .int_oobclk_out		(		),     
  .int_mmcm_lock_out		(		),  
  .int_qplllock_out		(		),	
  .int_qplloutclk_out		(		),
  .int_qplloutrefclk_out	(		),
  .int_pclk_sel_slave		(<=: expr {$max_lnk_wdt_int} :>'b0	),
<: } :>

  .s_axi_ctl_rready	(s_axi_ctl_rready)

	
);
<: } else { :>

<: print $ComponentName :>_support #

      (
         .C_NO_OF_LANES       (<=: print $max_lnk_wdt_int :>),
         .PCIE_EXT_CLK        (PCIE_EXT_CLK),  // Use External Clocking Module
         .PCIE_EXT_GT_COMMON  (PCIE_EXT_GT_COMMON),
         .REF_CLK_FREQ        (REF_CLK_FREQ ),
  	 .USER_CLK_FREQ      (USER_CLK_FREQ +1  ),          // PCIe user clock 1 frequency
  	 .USERCLK2_FREQ      (USERCLK2_FREQ +1  ),          // PCIe user clock 2 frequency
  	 .PCIE_GT_DEVICE     ("<: print $gt_device :>" ),               // PCIe GT device
  	 .PCIE_USE_MODE      ("<: print $gt_use_mode :>" ),
        .C_DATA_WIDTH        (C_DATA_WIDTH), // RX/TX interface data width
         .KEEP_WIDTH          (KEEP_WIDTH) // TSTRB width
      		
       )
<: print $ComponentName :>_support_i
 (
        .axi_aresetn(axi_aresetn),
        .sys_clk(sys_clk),
        .mmcm_lock(mmcm_lock),
        .pci_exp_txp(pci_exp_txp),
        .pci_exp_txn(pci_exp_txn),
        .pci_exp_rxp(pci_exp_rxp),
        .pci_exp_rxn(pci_exp_rxn),
        .m_axi_awaddr(m_axi_awaddr),
        .m_axi_awlen(m_axi_awlen),
        .m_axi_awsize(m_axi_awsize),
        .m_axi_awburst(m_axi_awburst),
        .m_axi_awprot(m_axi_awprot),
        .m_axi_awvalid(m_axi_awvalid),
        .m_axi_awready(m_axi_awready),
        .m_axi_awlock(m_axi_awlock),
        .m_axi_awcache(m_axi_awcache),
        .m_axi_wdata(m_axi_wdata),
        .m_axi_wstrb(m_axi_wstrb),
        .m_axi_wlast(m_axi_wlast),
        .m_axi_wvalid(m_axi_wvalid),
        .m_axi_wready(m_axi_wready),
        .m_axi_bresp(m_axi_bresp),
        .m_axi_bvalid(m_axi_bvalid),
        .m_axi_bready(m_axi_bready),
        .m_axi_araddr(m_axi_araddr),
        .m_axi_arlen(m_axi_arlen),
        .m_axi_arsize(m_axi_arsize),
        .m_axi_arburst(m_axi_arburst),
        .m_axi_arprot(m_axi_arprot),
        .m_axi_arvalid(m_axi_arvalid),
        .m_axi_arready(m_axi_arready),
        .m_axi_arlock(m_axi_arlock),
        .m_axi_arcache(m_axi_arcache),
        .m_axi_rdata(m_axi_rdata),
        .m_axi_rresp(m_axi_rresp),
        .m_axi_rlast(m_axi_rlast),
        .m_axi_rvalid(m_axi_rvalid),
        .m_axi_rready(m_axi_rready),
        .s_axi_awid		(4'b0),	
        .s_axi_awaddr		(s_axi_awaddr),	
        .s_axi_awregion	(4'b0),		
        .s_axi_awlen		(s_axi_awlen),	
        .s_axi_awsize		(s_axi_awsize),		
        .s_axi_awburst	(s_axi_awburst),			
        .s_axi_awvalid	(s_axi_awvalid),		
        .s_axi_awready	(s_axi_awready),		
        .s_axi_wdata		(s_axi_wdata),		
        .s_axi_wstrb		(s_axi_wstrb),			
        .s_axi_wlast		(s_axi_wlast),		
        .s_axi_wvalid		(s_axi_wvalid),		
        .s_axi_wready		(s_axi_wready),		
        .s_axi_bid		(),	
        .s_axi_bresp		(s_axi_bresp),	
        .s_axi_bvalid		(s_axi_bvalid),		
        .s_axi_bready		(s_axi_bready),		
        .s_axi_arid		(4'b0),		
        .s_axi_araddr		(s_axi_araddr[31:0]),		
        .s_axi_arregion	(4'b0),		
        .s_axi_arlen		(s_axi_arlen[7:0]),	
        .s_axi_arsize		(s_axi_arsize[2:0]),		
        .s_axi_arburst	(s_axi_arburst[1:0]),
        .s_axi_arvalid	(s_axi_arvalid),
        .s_axi_arready	(s_axi_arready),
        .s_axi_rid		(),
        .s_axi_rdata		(s_axi_rdata),	
        .s_axi_rresp		(s_axi_rresp),
        .s_axi_rlast		(s_axi_rlast),
        .s_axi_rvalid		(s_axi_rvalid),
        .s_axi_rready		(s_axi_rready),
        .s_axi_ctl_awaddr	(s_axi_ctl_awaddr),
        .s_axi_ctl_awvalid	(s_axi_ctl_awvalid),
        .s_axi_ctl_awready	(s_axi_ctl_awready),
        .s_axi_ctl_wdata	(s_axi_ctl_wdata),
        .s_axi_ctl_wstrb	(s_axi_ctl_wstrb),
        .s_axi_ctl_wvalid	(s_axi_ctl_wvalid),
        .s_axi_ctl_wready	(s_axi_ctl_wready),
        .s_axi_ctl_bresp	(s_axi_ctl_bresp),
        .s_axi_ctl_bvalid	(s_axi_ctl_bvalid),
        .s_axi_ctl_bready	(s_axi_ctl_bready),
        .s_axi_ctl_araddr	(s_axi_ctl_araddr),
        .s_axi_ctl_arvalid	(s_axi_ctl_arvalid),
        .s_axi_ctl_arready	(s_axi_ctl_arready),
        .s_axi_ctl_rdata	(s_axi_ctl_rdata),
        .s_axi_ctl_rresp	(s_axi_ctl_rresp),
        .s_axi_ctl_rvalid	(s_axi_ctl_rvalid),
        .s_axi_ctl_rready	(s_axi_ctl_rready),

 //----------------------------------------------------------------------------------------------------------------//
  // 2. Clock & GT COMMON Sharing Interface                                                                         //
  //----------------------------------------------------------------------------------------------------------------//
<: if {($pcie_ext_clk_string == "TRUE")} { :>
  .pipe_pclk_out_slave                        ( ),
  .pipe_rxusrclk_in                          ( ),
  .pipe_rxoutclk_in                          ( ),
  .pipe_dclk_in                              ( ),
  .pipe_userclk1_in                          ( ),
  .pipe_oobclk_in                            ( ),
  .pipe_userclk2_in                          ( ),
  .pipe_mmcm_lock_in                         ( ),
  .pipe_pclk_sel_slave                        ( <=: expr {($max_lnk_wdt_int)} :>'b0),
  .pipe_mmcm_rst_n                            ( pipe_mmcm_rst_n ),        // Async      | Async
<: } :>

<: if {($pcie_ext_gt_common_string == "TRUE")} { :> 
  .qpll_qplllock                              ( ),
  .qpll_qplloutclk                            ( ),
  .qpll_qplloutrefclk                         ( ),
<: } :>


<: if {($ext_ch_gt_drp_string == "TRUE")} { :>
   //---------- CHANNEL DRP  --------------------------------
  .ext_ch_gt_drpclk                           (),
  .ext_ch_gt_drpaddr                          (ext_ch_gt_drpaddr),
  .ext_ch_gt_drpen                            (ext_ch_gt_drpen),
  .ext_ch_gt_drpdi                            (ext_ch_gt_drpdi),
  .ext_ch_gt_drpwe                            (ext_ch_gt_drpwe),
  .ext_ch_gt_drpdo                            ( ),
  .ext_ch_gt_drprdy                           ( ),

<: } :>

<: if {($transceiver_ctrl_status_ports_string == "TRUE")} { :>
 //------------TRANSCEIVER DEBUG-----------------------------------
  .pipe_txprbssel                             (3'b000),
  .pipe_rxprbssel                             (3'b000),
  .pipe_txprbsforceerr                        (1'b0),
  .pipe_rxprbscntreset                        (1'b0),
  .pipe_loopback                              (3'b000),
  .pipe_txinhibit( <=: expr {$max_lnk_wdt_int} :>'b0),
  .pipe_rxprbserr                             ( ),
  .pipe_rst_fsm                               (),
  .pipe_qrst_fsm                              (),
  .pipe_rate_fsm                              (),
  .pipe_sync_fsm_tx                           (),
  .pipe_sync_fsm_rx                           (),
  .pipe_drp_fsm                               (),
  .pipe_rst_idle                              (),
  .pipe_qrst_idle                             (),
  .pipe_rate_idle                             (),
  .pipe_eyescandataerror         (),
  .pipe_rxstatus	   (),
  .pipe_dmonitorout    	   (),
  .pipe_cpll_lock                             (),  
  .pipe_qpll_lock                             (),     
  .pipe_rxpmaresetdone                        (),         
  .pipe_rxbufstatus                           (),            
  .pipe_txphaligndone                         (),           
  .pipe_txphinitdone                          (),            
  .pipe_txdlysresetdone                       (),        
  .pipe_rxphaligndone                         (),           
  .pipe_rxdlysresetdone                       (),         
  .pipe_rxsyncdone                            (),            
  .pipe_rxdisperr                             (),          
  .pipe_rxnotintable                          (),          
  .pipe_rxcommadet                            (),               
  .gt_ch_drp_rdy                              ( ),
  .pipe_debug_0                               (),
  .pipe_debug_1                               (),
  .pipe_debug_2                               (),
  .pipe_debug_3                               (),
  .pipe_debug_4                               (),
  .pipe_debug_5                               (),
  .pipe_debug_6                               (),
  .pipe_debug_7                               (),
  .pipe_debug_8                               (),
  .pipe_debug_9                               (),
  .pipe_debug                                 (),
<: } :>

<: if {($ext_pipe_interface_string == "TRUE")} { :>
      .common_commands_in	(common_commands_in_i  ),
      .pipe_rx_0_sigs		(pipe_rx_0_sigs_i      ),
      .pipe_rx_1_sigs		(pipe_rx_1_sigs_i      ),
      .pipe_rx_2_sigs		(pipe_rx_2_sigs_i      ),
      .pipe_rx_3_sigs		(pipe_rx_3_sigs_i      ),
      .pipe_rx_4_sigs		(pipe_rx_4_sigs_i      ),
      .pipe_rx_5_sigs		(pipe_rx_5_sigs_i      ),
      .pipe_rx_6_sigs		(pipe_rx_6_sigs_i      ),
      .pipe_rx_7_sigs		(pipe_rx_7_sigs_i      ),
                                                                             
      .common_commands_out	(common_commands_out_i ),
      .pipe_tx_0_sigs		(pipe_tx_0_sigs_i      ),
      .pipe_tx_1_sigs		(pipe_tx_1_sigs_i      ),
      .pipe_tx_2_sigs		(pipe_tx_2_sigs_i      ),
      .pipe_tx_3_sigs		(pipe_tx_3_sigs_i      ),
      .pipe_tx_4_sigs		(pipe_tx_4_sigs_i      ),
      .pipe_tx_5_sigs		(pipe_tx_5_sigs_i      ),
      .pipe_tx_6_sigs		(pipe_tx_6_sigs_i      ),
      .pipe_tx_7_sigs		(pipe_tx_7_sigs_i      ),

<: } :>

  //----------------------------------------------------------------------------------------------------------------//
  // 8. System  (SYS) Interface                                                                                     //
  //----------------------------------------------------------------------------------------------------------------//

        .axi_aclk_out		(axi_aclk_out)
 
    );
<: } :>

    //example design BRAM Controller
    axi_bram_ctrl_0 AXI_BRAM_CTL(
      .s_axi_aclk 	(axi_aclk_out),
      .s_axi_aresetn 	(axi_aresetn),
      .s_axi_awid 	(4'b0),
      .s_axi_awaddr 	(awaddr),
      .s_axi_awlen 	(awlen),
      .s_axi_awsize 	(awsize),
      .s_axi_awburst 	(awburst),
      .s_axi_awlock 	(m_axi_awlock),
      .s_axi_awcache 	(awcache),
      .s_axi_awprot 	(awprot),
      .s_axi_awvalid	(m_axi_awvalid),
      .s_axi_awready 	(m_axi_awready),
      .s_axi_wdata 	(wdata),
      .s_axi_wstrb	(wstrb),
      .s_axi_wlast 	(m_axi_wlast),
      .s_axi_wvalid 	(m_axi_wvalid),
      .s_axi_wready 	(m_axi_wready),
      .s_axi_bid	(),
      .s_axi_bresp 	(bresp),
      .s_axi_bvalid	(m_axi_bvalid),
      .s_axi_bready 	(m_axi_bready),
      .s_axi_arid 	(4'b0),
      .s_axi_araddr 	(araddr),
      .s_axi_arlen      (arlen),
      .s_axi_arsize	(arsize),
      .s_axi_arburst 	(arburst),
      .s_axi_arlock	(m_axi_arlock),
      .s_axi_arcache 	(arcache),
      .s_axi_arprot	(arprot),
      .s_axi_arvalid 	(m_axi_arvalid),
      .s_axi_arready 	(m_axi_arready),
      .s_axi_rid	(),
      .s_axi_rdata      (rdata),
      .s_axi_rresp      (rresp),
      .s_axi_rlast      (m_axi_rlast),
      .s_axi_rvalid	(m_axi_rvalid),
      .s_axi_rready	(m_axi_rready)
);

 wire user_lnk_up;

   //Model connected to S_AXI of axi_pcie
     m_axi_model # 
      (
        .PL_LINK_CAP_MAX_LINK_SPEED    ( PL_LINK_CAP_MAX_LINK_SPEED ),
        .PL_LINK_CAP_MAX_LINK_WIDTH    ( PL_LINK_CAP_MAX_LINK_WIDTH )
       )
     S_AXI(
      . trans_m_axi_arready	(s_axi_arready	 ),
      . trans_m_axi_arvalid	(s_axi_arvalid	 ),
      . trans_m_axi_araddr	(s_axi_araddr[31:0]	 ),
      . trans_m_axi_arlen	(s_axi_arlen[7:0]	 ),
      . trans_m_axi_arsize	(s_axi_arsize[2:0]	 ),
      . trans_m_axi_arburst	(s_axi_arburst[1:0]	 ),
      . trans_m_axi_arprot	(	 ),
      . trans_m_axi_arcache	(	 ),
      . trans_m_axi_rready	(s_axi_rready	 ),
      . trans_m_axi_rvalid	(s_axi_rvalid	 ),
      . trans_m_axi_rdata	(s_axi_rdata	 ),
      . trans_m_axi_rresp	(s_axi_rresp	 ),
      . trans_m_axi_rlast	(s_axi_rlast	 ),
      . trans_m_axi_arlock	(	 ),
      . trans_m_axi_awready	(s_axi_awready	 ),
      . trans_m_axi_awvalid	(s_axi_awvalid	 ),
      . trans_m_axi_awaddr	(s_axi_awaddr[31:0]	 ),
      . trans_m_axi_awlen	(s_axi_awlen	 ),
      . trans_m_axi_awsize	(s_axi_awsize	 ),
      . trans_m_axi_awburst	(s_axi_awburst	 ),
      . trans_m_axi_awprot	(	 ),
      . trans_m_axi_awcache	(	 ),
      . trans_m_axi_awlock	(	 ),
      . trans_m_axi_wready	(s_axi_wready	 ),
      . trans_m_axi_wvalid	(s_axi_wvalid	 ),
      . trans_m_axi_wdata	(s_axi_wdata	 ),
      . trans_m_axi_wstrb	(s_axi_wstrb	 ),
      . trans_m_axi_wlast	(s_axi_wlast	 ),
      . trans_m_axi_bready	(s_axi_bready	 ),
      . trans_m_axi_bvalid	(s_axi_bvalid	 ),
      . trans_m_axi_bresp	(s_axi_bresp	 ),
      . configs_completed   (configs_completed),
      . pio_test_completed  (pio_test_completed),
      . pio_test_failed     (pio_test_failed),
      . user_link_up        ( user_lnk_up  ),
      . trans_m_axi_aclk	(axi_aclk_out ),
      . trans_m_axi_aresetn	(axi_aresetn  )
);

   //Model connected to S_AXI_CTL of axi_pcie
     m_axi_ctl_model # 
      (
        .PL_LINK_CAP_MAX_LINK_SPEED    ( PL_LINK_CAP_MAX_LINK_SPEED ),
        .PL_LINK_CAP_MAX_LINK_WIDTH    ( PL_LINK_CAP_MAX_LINK_WIDTH )
       )
     S_AXI_CTL
      (
      . trans_m_axi_ctl_arready	(s_axi_ctl_arready	 ),
      . trans_m_axi_ctl_arvalid	(s_axi_ctl_arvalid	 ),
      . trans_m_axi_ctl_araddr	(s_axi_ctl_araddr[31:0]	 ),
      . trans_m_axi_ctl_rready	(s_axi_ctl_rready	 ),
      . trans_m_axi_ctl_rvalid	(s_axi_ctl_rvalid	 ),
      . trans_m_axi_ctl_rdata	(s_axi_ctl_rdata	 ),
      . trans_m_axi_ctl_rresp	(s_axi_ctl_rresp	 ),
      . trans_m_axi_ctl_awready	(s_axi_ctl_awready	 ),
      . trans_m_axi_ctl_awvalid	(s_axi_ctl_awvalid	 ),
      . trans_m_axi_ctl_awaddr	(s_axi_ctl_awaddr	 ),
      . trans_m_axi_ctl_wready	(s_axi_ctl_wready	 ),
      . trans_m_axi_ctl_wvalid	(s_axi_ctl_wvalid	 ),
      . trans_m_axi_ctl_wdata	(s_axi_ctl_wdata	 ),
      . trans_m_axi_ctl_wstrb	(s_axi_ctl_wstrb	 ),
      . trans_m_axi_ctl_wlast	(s_axi_ctl_wlast	 ),
      . trans_m_axi_ctl_bready	(s_axi_ctl_bready	 ),
      . trans_m_axi_ctl_bvalid	(s_axi_ctl_bvalid	 ),
      . trans_m_axi_ctl_bresp	(s_axi_ctl_bresp	 ),
      . configs_completed       (configs_completed),
      . user_link_up            ( user_lnk_up  ),
      . trans_m_axi_ctl_aclk	(axi_aclk_out ),
      . trans_m_axi_ctl_aresetn	(axi_aresetn  )
);

endmodule
