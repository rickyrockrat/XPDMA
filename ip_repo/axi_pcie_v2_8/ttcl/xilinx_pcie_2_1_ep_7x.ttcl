<#: ttcl/GetValueSimParam.ttcl :>
<: if {$ep} ttcl_return :>
<: setFileName  "xilinx_pcie_2_1_ep_7x" :>
<: setFileExtension ".v" :>
<: setOutputDirectory [ttcl_string_concat $ComponentName "/example_design"] :>
<#: ttcl/header.ttcl :>
///-----------------------------------------------------------------------------
//
// (c) Copyright 2010-2011 Xilinx, Inc. All rights reserved.
//
// This file contains confidential and proprietary information
// of Xilinx, Inc. and is protected under U.S. and
// international copyright and other intellectual property
// laws.
//
// DISCLAIMER
// This disclaimer is not a license and does not grant any
// rights to the materials distributed herewith. Except as
// otherwise provided in a valid license issued to you by
// Xilinx, and to the maximum extent permitted by applicable
// law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
// WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
// AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
// BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
// INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
// (2) Xilinx shall not be liable (whether in contract or tort,
// including negligence, or under any other theory of
// liability) for any loss or damage of any kind or nature
// related to, arising under or in connection with these
// materials, including for any direct, or any indirect,
// special, incidental, or consequential loss or damage
// (including loss of data, profits, goodwill, or any type of
// loss or damage suffered as a result of any action brought
// by a third party) even if such damage or loss was
// reasonably foreseeable or Xilinx had been advised of the
// possibility of the same.
//
// CRITICAL APPLICATIONS
// Xilinx products are not designed or intended to be fail-
// safe, or for use in any application requiring fail-safe
// performance, such as life-support or safety devices or
// systems, Class III medical devices, nuclear facilities,
// applications related to the deployment of airbags, or any
// other applications that could lead to death, personal
// injury, or severe property or environmental damage
// (individually and collectively, "Critical
// Applications"). Customer assumes the sole risk and
// liability of any use of Xilinx products in Critical
// Applications, subject only to applicable laws and
// regulations governing limitations on product liability.
//
// THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
// PART OF THIS FILE AT ALL TIMES.
//
//-----------------------------------------------------------------------------
// Project    : Series-7 Integrated Block for PCI Express
// File       : xilinx_pcie_2_1_ep_7x.v
// Version    : 3.0
//--
//-- Description:  PCI Express Endpoint example FPGA design
//--
//------------------------------------------------------------------------------

`timescale 1ns / 1ps

module xilinx_pcie_2_1_ep_7x # (
  parameter                       REF_CLK_FREQ = 0,                                   // 0 - 100 MHz, 1 - 125 MHz,  2 - 250 MHz
  parameter                       PCIE_EXT_CLK = "TRUE", //"<=: print $pcie_ext_clk_string :>", // Use External Clocking Module
  parameter                       PL_FAST_TRAIN = "FALSE",
  parameter                       ALLOW_X8_GEN2 = "FALSE",
  parameter                       C_DATA_WIDTH = <=: print $pcie_axi_if_wdt_int :>,
  parameter                       REM_WIDTH  = (C_DATA_WIDTH == 128) ? 2 : 1,
  parameter                       KEEP_WIDTH = C_DATA_WIDTH / 8,
  parameter                       LINK_CAP_MAX_LINK_WIDTH = 6'h<=: expr {$max_lnk_spd_int + 1} :>,
  parameter                       DEVICE_ID = 16'h506F,
  parameter                       LINK_CAP_MAX_LINK_SPEED = 1,
  parameter                       LINK_CTRL2_TARGET_LINK_SPEED = 1,
  parameter                       DEV_CAP_MAX_PAYLOAD_SUPPORTED = 2,
  parameter                       USER_CLK_FREQ = 3,
  parameter                       USER_CLK2_DIV2 = "FALSE",
  parameter                       TRN_DW = "FALSE",
  parameter                       VC0_TX_LASTPACKET = 28,
  parameter                       VC0_RX_RAM_LIMIT = 13'h03ff,
  parameter                       VC0_CPL_INFINITE = "TRUE",
  parameter                       VC0_TOTAL_CREDITS_PD = 154,
  parameter                       VC0_TOTAL_CREDITS_CD = 154

) (
  output  [<=: expr {$max_lnk_wdt_int - 1} :>:0]    pci_exp_txp,
  output  [<=: expr {$max_lnk_wdt_int - 1} :>:0]    pci_exp_txn,
  input   [<=: expr {$max_lnk_wdt_int - 1} :>:0]    pci_exp_rxp,
  input   [<=: expr {$max_lnk_wdt_int - 1} :>:0]    pci_exp_rxn,

<: if {($ext_pipe_interface_string == "TRUE")} { :>
  //----------------------------------------------------------------------------------------------------------------//
  // PIPE PORTS to TOP Level For PIPE SIMULATION with 3rd Party IP/BFM/Xilinx BFM
  //----------------------------------------------------------------------------------------------------------------//
    input wire   [11:0]  common_commands_in,
    input wire   [24:0]  pipe_rx_0_sigs,
    input wire   [24:0]  pipe_rx_1_sigs,
    input wire   [24:0]  pipe_rx_2_sigs,
    input wire   [24:0]  pipe_rx_3_sigs,
    input wire   [24:0]  pipe_rx_4_sigs,
    input wire   [24:0]  pipe_rx_5_sigs,
    input wire   [24:0]  pipe_rx_6_sigs,
    input wire   [24:0]  pipe_rx_7_sigs,

    output wire  [11:0]  common_commands_out,
    output wire  [24:0]  pipe_tx_0_sigs,
    output wire  [24:0]  pipe_tx_1_sigs,
    output wire  [24:0]  pipe_tx_2_sigs,
    output wire  [24:0]  pipe_tx_3_sigs,
    output wire  [24:0]  pipe_tx_4_sigs,
    output wire  [24:0]  pipe_tx_5_sigs,
    output wire  [24:0]  pipe_tx_6_sigs,
    output wire  [24:0]  pipe_tx_7_sigs,
<: } :>

  input                  sys_clk_p,
  input                  sys_clk_n,
  input                  sys_rst_n
);

  localparam                                  TCQ = 1;

  wire                                        sys_clk;
  wire                                        user_clk;
  wire                                        user_reset;
  wire                                        user_lnk_up;

  // Tx
  wire                                        tx_cfg_gnt;
  wire                                        s_axis_tx_tready;
  wire [3:0]                                  s_axis_tx_tuser;
  wire [C_DATA_WIDTH-1:0]                     s_axis_tx_tdata;
  wire [KEEP_WIDTH-1:0]                       s_axis_tx_tkeep;
  wire                                        s_axis_tx_tlast;
  wire                                        s_axis_tx_tvalid;


  // Rx
  wire [C_DATA_WIDTH-1:0]                     m_axis_rx_tdata;
  wire [KEEP_WIDTH-1:0]                       m_axis_rx_tkeep;
  wire                                        m_axis_rx_tlast;
  wire                                        m_axis_rx_tvalid;
  wire                                        m_axis_rx_tready;
  wire  [21:0]                                m_axis_rx_tuser;
  wire                                        rx_np_ok;
  wire                                        rx_np_req;

  // Flow Control
  wire [2:0]                                  fc_sel;


  //-------------------------------------------------------
  // 3. Configuration (CFG) Interface
  //-------------------------------------------------------
  wire                                        cfg_err_cor;
  wire                                        cfg_err_atomic_egress_blocked;
  wire                                        cfg_err_internal_cor;
  wire                                        cfg_err_malformed;
  wire                                        cfg_err_mc_blocked;
  wire                                        cfg_err_poisoned;
  wire                                        cfg_err_norecovery;
  wire                                        cfg_err_acs;
  wire                                        cfg_err_internal_uncor;
  wire                                        cfg_err_ur;
  wire                                        cfg_err_ecrc;
  wire                                        cfg_err_cpl_timeout;
  wire                                        cfg_err_cpl_abort;
  wire                                        cfg_err_cpl_unexpect;
  wire                                        cfg_err_posted;
  wire                                        cfg_err_locked;
  wire  [47:0]                                cfg_err_tlp_cpl_header;
  wire                                        cfg_interrupt;
  wire                                        cfg_interrupt_assert;
  wire   [7:0]                                cfg_interrupt_di;
  wire                                        cfg_interrupt_stat;
  wire   [4:0]                                cfg_pciecap_interrupt_msgnum;
  wire                                        cfg_turnoff_ok;
  wire                                        cfg_to_turnoff;
  wire                                        cfg_trn_pending;
  wire                                        cfg_pm_halt_aspm_l0s;
  wire                                        cfg_pm_halt_aspm_l1;
  wire                                        cfg_pm_force_state_en;
  wire   [1:0]                                cfg_pm_force_state;
  wire                                        cfg_pm_wake;
  wire   [7:0]                                cfg_bus_number;
  wire   [4:0]                                cfg_device_number;
  wire   [2:0]                                cfg_function_number;
  wire  [63:0]                                cfg_dsn;
  wire [127:0]                                cfg_err_aer_headerlog;
  wire   [4:0]                                cfg_aer_interrupt_msgnum;

  wire  [31:0]                                cfg_mgmt_di;
  wire   [3:0]                                cfg_mgmt_byte_en;
  wire   [9:0]                                cfg_mgmt_dwaddr;
  wire                                        cfg_mgmt_wr_en;
  wire                                        cfg_mgmt_rd_en;
  wire                                        cfg_mgmt_wr_readonly;


  //-------------------------------------------------------
  // 4. Physical Layer Control and Status (PL) Interface
  //-------------------------------------------------------

  wire                                        pl_directed_link_auton;
  wire [1:0]                                  pl_directed_link_change;
  wire                                        pl_directed_link_speed;
  wire [1:0]                                  pl_directed_link_width;
  wire                                        pl_upstream_prefer_deemph;

  wire                                        sys_rst_n_c;

  // Wires used for external clocking connectivity
  wire                                        pipe_pclk_in;
  wire                                        pipe_rxusrclk_in;
  wire   [3:0]   pipe_rxoutclk_in;
  wire                                        pipe_dclk_in;
  wire                                        pipe_userclk1_in;
  wire                                        pipe_userclk2_in;
  wire                                        pipe_mmcm_lock_in;

  wire                                        pipe_txoutclk_out;
  wire [3:0]     pipe_rxoutclk_out;
  wire [3:0]     pipe_pclk_sel_out;
  wire                                        pipe_gen3_out;
  wire                                        pipe_oobclk_in;


  localparam USERCLK2_FREQ = (USER_CLK2_DIV2 == "TRUE") ? (USER_CLK_FREQ == 4) ? 3 : (USER_CLK_FREQ == 3) ? 2 : USER_CLK_FREQ
                                                                                   : USER_CLK_FREQ;

  assign sys_rst_n_c = sys_rst_n;

  reg user_reset_q;
  reg user_lnk_up_q;
  always @(posedge user_clk) begin
    user_reset_q <= user_reset;
    user_lnk_up_q <= user_lnk_up;
  end

  // Generate External Clock Module if External Clocking is selected
  generate
    if (PCIE_EXT_CLK == "TRUE") begin : ext_clk

      //---------- PIPE Clock Module -------------------------------------------------
model_ap2_tst_pipe_clock #
      (
          .PCIE_ASYNC_EN                  ( "FALSE" ),     // PCIe async enable
          .PCIE_TXBUF_EN                  ( "FALSE" ),     // PCIe TX buffer enable for Gen1/Gen2 only
          .PCIE_LANE                      ( 6'h<=: expr {$max_lnk_wdt_int} :> ),     // PCIe number of lanes
          .PCIE_LINK_SPEED                ( 2 ),
          .PCIE_REFCLK_FREQ               ( 0 ),     // PCIe reference clock frequency
          .PCIE_USERCLK1_FREQ             ( USER_CLK_FREQ +1 ),     // PCIe user clock 1 frequency
          .PCIE_USERCLK2_FREQ             ( USERCLK2_FREQ +1 ),     // PCIe user clock 2 frequency
          .PCIE_DEBUG_MODE                ( 0 )
      )
      model_ap2_tst_pipe_clock_i
      (

          //---------- Input -------------------------------------
          .CLK_CLK                        ( sys_clk ),
          .CLK_TXOUTCLK                   ( pipe_txoutclk_out ),     // Reference clock from lane 0
          .CLK_RXOUTCLK_IN                ( pipe_rxoutclk_out ),
          .CLK_RST_N                      ( 1'b1 ),
          .CLK_PCLK_SEL                   ( pipe_pclk_sel_out ),
          .CLK_GEN3                       ( pipe_gen3_out ),

          //---------- Output ------------------------------------
          .CLK_PCLK                       ( pipe_pclk_in ),
          .CLK_RXUSRCLK                   ( pipe_rxusrclk_in ),
          .CLK_RXOUTCLK_OUT               ( pipe_rxoutclk_in ),
          .CLK_DCLK                       ( pipe_dclk_in ),
          .CLK_OOBCLK                     ( pipe_oobclk_in ),
          .CLK_USERCLK1                   ( pipe_userclk1_in ),
          .CLK_USERCLK2                   ( pipe_userclk2_in ),
          .CLK_MMCM_LOCK                  ( pipe_mmcm_lock_in ),
      	  .CLK_PCLK_SLAVE(),
          .CLK_PCLK_SEL_SLAVE()


      );
    end
  endgenerate

  model_ap2_tst_pcie_2_1_ep_7x # (

    .REF_CLK_FREQ                              ( REF_CLK_FREQ ),
    .PCIE_EXT_CLK                              ( PCIE_EXT_CLK ),
    .PL_FAST_TRAIN                             ( PL_FAST_TRAIN ),
    .ALLOW_X8_GEN2                             ( ALLOW_X8_GEN2 ),
    .C_DATA_WIDTH                              ( C_DATA_WIDTH ),
    .LINK_CAP_MAX_LINK_WIDTH                   ( LINK_CAP_MAX_LINK_WIDTH ),
    .LINK_CAP_MAX_LINK_SPEED                   ( LINK_CAP_MAX_LINK_SPEED ),
    .LINK_CTRL2_TARGET_LINK_SPEED              ( LINK_CTRL2_TARGET_LINK_SPEED ),
    .DEV_CAP_MAX_PAYLOAD_SUPPORTED             ( DEV_CAP_MAX_PAYLOAD_SUPPORTED ),
    .USER_CLK_FREQ                             ( USER_CLK_FREQ ),
    .USER_CLK2_DIV2                            ( USER_CLK2_DIV2 ),
    .TRN_DW                                    ( TRN_DW ),
    .VC0_TX_LASTPACKET                         ( VC0_TX_LASTPACKET ),
    .VC0_RX_RAM_LIMIT                          ( VC0_RX_RAM_LIMIT ),
    .VC0_CPL_INFINITE                          ( VC0_CPL_INFINITE ),
    .VC0_TOTAL_CREDITS_PD                      ( VC0_TOTAL_CREDITS_PD ),
    .VC0_TOTAL_CREDITS_CD                      ( VC0_TOTAL_CREDITS_CD )

  ) ep
 (

  //----------------------------------------------------------------------------------------------------------------//
  // 1. PCI Express (pci_exp) Interface                                                                             //
  //----------------------------------------------------------------------------------------------------------------//

  // Tx
  .pci_exp_txn                                ( pci_exp_txn ),
  .pci_exp_txp                                ( pci_exp_txp ),

  // Rx
  .pci_exp_rxn                                ( pci_exp_rxn ),
  .pci_exp_rxp                                ( pci_exp_rxp ),

  //----------------------------------------------------------------------------------------------------------------//
  // 2. Clocking Interface                                                                                          //
  //----------------------------------------------------------------------------------------------------------------//
  .pipe_pclk_in                              ( pipe_pclk_in ),
  .pipe_rxusrclk_in                          ( pipe_rxusrclk_in ),
  .pipe_rxoutclk_in                          ( pipe_rxoutclk_in ),
  .pipe_dclk_in                              ( pipe_dclk_in ),
  .pipe_userclk1_in                          ( pipe_userclk1_in ),
  .pipe_oobclk_in                            ( pipe_oobclk_in ),
  .pipe_userclk2_in                          ( pipe_userclk2_in ),
  .pipe_mmcm_lock_in                         ( pipe_mmcm_lock_in ),

  .pipe_txoutclk_out                         ( pipe_txoutclk_out ),
  .pipe_rxoutclk_out                         ( pipe_rxoutclk_out ),
  .pipe_pclk_sel_out                         ( pipe_pclk_sel_out ),
  .pipe_gen3_out                             ( pipe_gen3_out ),


  //----------------------------------------------------------------------------------------------------------------//
  // 3. AXI-S Interface                                                                                             //
  //----------------------------------------------------------------------------------------------------------------//

  // Common
  .user_clk_out                               ( user_clk ),
  .user_reset_out                             ( user_reset ),
  .user_lnk_up                                ( user_lnk_up ),

  // TX

  .tx_buf_av                                  ( ), 
  .tx_err_drop                                ( ), 
  .tx_cfg_req                                 ( ), 
  .s_axis_tx_tready                           ( s_axis_tx_tready ),
  .s_axis_tx_tdata                            ( s_axis_tx_tdata ),
  .s_axis_tx_tkeep                            ( s_axis_tx_tkeep ),
  .s_axis_tx_tuser                            ( s_axis_tx_tuser ),
  .s_axis_tx_tlast                            ( s_axis_tx_tlast ),
  .s_axis_tx_tvalid                           ( s_axis_tx_tvalid ),

  .tx_cfg_gnt                                 ( tx_cfg_gnt ),

  // Rx
  .m_axis_rx_tdata                            ( m_axis_rx_tdata ),
  .m_axis_rx_tkeep                            ( m_axis_rx_tkeep ),
  .m_axis_rx_tlast                            ( m_axis_rx_tlast ),
  .m_axis_rx_tvalid                           ( m_axis_rx_tvalid ),
  .m_axis_rx_tready                           ( m_axis_rx_tready ),
  .m_axis_rx_tuser                            ( m_axis_rx_tuser ),
  .rx_np_ok                                   ( rx_np_ok ),
  .rx_np_req                                  ( rx_np_req ),

  // Flow Control
  .fc_cpld                                    ( ), 
  .fc_cplh                                    ( ), 
  .fc_npd                                     ( ), 
  .fc_nph                                     ( ), 
  .fc_pd                                      ( ), 
  .fc_ph                                      ( ), 
  .fc_sel                                     ( fc_sel ),


  //----------------------------------------------------------------------------------------------------------------//
  // 4. Configuration (CFG) Interface                                                                               //
  //----------------------------------------------------------------------------------------------------------------//

  //------------------------------------------------//
  // EP and RP                                      //
  //------------------------------------------------//
  .cfg_mgmt_do                                ( ),
  .cfg_mgmt_rd_wr_done                        ( ),

  .cfg_status                                 ( ), 
  .cfg_command                                ( ), 
  .cfg_dstatus                                ( ), 
  .cfg_dcommand                               ( ), 
  .cfg_lstatus                                ( ), 
  .cfg_lcommand                               ( ), 
  .cfg_dcommand2                              ( ), 
  .cfg_pcie_link_state                        ( ), 

  .cfg_pmcsr_pme_en                           ( ),
  .cfg_pmcsr_powerstate                       ( ),
  .cfg_pmcsr_pme_status                       ( ),
  .cfg_received_func_lvl_rst                  ( ),

  // Management Interface
  .cfg_mgmt_di                                ( cfg_mgmt_di ),
  .cfg_mgmt_byte_en                           ( cfg_mgmt_byte_en ),
  .cfg_mgmt_dwaddr                            ( cfg_mgmt_dwaddr ),
  .cfg_mgmt_wr_en                             ( cfg_mgmt_wr_en ),
  .cfg_mgmt_rd_en                             ( cfg_mgmt_rd_en ),
  .cfg_mgmt_wr_readonly                       ( cfg_mgmt_wr_readonly ),

  // Error Reporting Interface
  .cfg_err_ecrc                               ( cfg_err_ecrc ),
  .cfg_err_ur                                 ( cfg_err_ur ),
  .cfg_err_cpl_timeout                        ( cfg_err_cpl_timeout ),
  .cfg_err_cpl_unexpect                       ( cfg_err_cpl_unexpect ),
  .cfg_err_cpl_abort                          ( cfg_err_cpl_abort ),
  .cfg_err_posted                             ( cfg_err_posted ),
  .cfg_err_cor                                ( cfg_err_cor ),
  .cfg_err_atomic_egress_blocked              ( cfg_err_atomic_egress_blocked ),
  .cfg_err_internal_cor                       ( cfg_err_internal_cor ),
  .cfg_err_malformed                          ( cfg_err_malformed ),
  .cfg_err_mc_blocked                         ( cfg_err_mc_blocked ),
  .cfg_err_poisoned                           ( cfg_err_poisoned ),
  .cfg_err_norecovery                         ( cfg_err_norecovery ),
  .cfg_err_tlp_cpl_header                     ( cfg_err_tlp_cpl_header ),
  .cfg_err_cpl_rdy                            (  ),
  .cfg_err_locked                             ( cfg_err_locked ),
  .cfg_err_acs                                ( cfg_err_acs ),
  .cfg_err_internal_uncor                     ( cfg_err_internal_uncor ),

  .cfg_trn_pending                            ( cfg_trn_pending ),
  .cfg_pm_halt_aspm_l0s                       ( cfg_pm_halt_aspm_l0s ),
  .cfg_pm_halt_aspm_l1                        ( cfg_pm_halt_aspm_l1 ),
  .cfg_pm_force_state_en                      ( cfg_pm_force_state_en ),
  .cfg_pm_force_state                         ( cfg_pm_force_state ),

  .cfg_dsn                                    ( cfg_dsn ),

  //------------------------------------------------//
  // EP Only                                        //
  //------------------------------------------------//
  .cfg_interrupt                              ( cfg_interrupt ),
  .cfg_interrupt_rdy                          ( ),
  .cfg_interrupt_assert                       ( cfg_interrupt_assert ),
  .cfg_interrupt_di                           ( cfg_interrupt_di ),
  .cfg_interrupt_do                           ( ), 
  .cfg_interrupt_mmenable                     ( ),
  .cfg_interrupt_msienable                    ( ),
  .cfg_interrupt_msixenable                   ( ),
  .cfg_interrupt_msixfm                       ( ), 
  .cfg_interrupt_stat                         ( cfg_interrupt_stat ),
  .cfg_pciecap_interrupt_msgnum               ( cfg_pciecap_interrupt_msgnum ),
  .cfg_to_turnoff                             ( cfg_to_turnoff ),
  .cfg_turnoff_ok                             ( cfg_turnoff_ok ),
  .cfg_bus_number                             ( cfg_bus_number ),
  .cfg_device_number                          ( cfg_device_number ),
  .cfg_function_number                        ( cfg_function_number ),
  .cfg_pm_wake                                ( cfg_pm_wake ),

  //------------------------------------------------//
  // RP Only                                        //
  //------------------------------------------------//

  .cfg_pm_send_pme_to                         ( 1'b0 ),
  .cfg_ds_bus_number                          ( 8'b0 ),
  .cfg_ds_device_number                       ( 5'b0 ),
  .cfg_ds_function_number                     ( 3'b0 ),
  .cfg_mgmt_wr_rw1c_as_rw                     ( 1'b0 ),
  .cfg_msg_received                           ( ),
  .cfg_msg_data                               ( ),

  .cfg_bridge_serr_en                         ( ),
  .cfg_slot_control_electromech_il_ctl_pulse  ( ),
  .cfg_root_control_syserr_corr_err_en        ( ),
  .cfg_root_control_syserr_non_fatal_err_en   ( ),
  .cfg_root_control_syserr_fatal_err_en       ( ),
  .cfg_root_control_pme_int_en                ( ),
  .cfg_aer_rooterr_corr_err_reporting_en      ( ),
  .cfg_aer_rooterr_non_fatal_err_reporting_en ( ),
  .cfg_aer_rooterr_fatal_err_reporting_en     ( ),
  .cfg_aer_rooterr_corr_err_received          ( ),
  .cfg_aer_rooterr_non_fatal_err_received     ( ),
  .cfg_aer_rooterr_fatal_err_received         ( ),

  .cfg_msg_received_err_cor                   ( ),
  .cfg_msg_received_err_non_fatal             ( ),
  .cfg_msg_received_err_fatal                 ( ),
  .cfg_msg_received_pm_as_nak                 ( ),
  .cfg_msg_received_pme_to_ack                ( ),
  .cfg_msg_received_assert_int_a              ( ),
  .cfg_msg_received_assert_int_b              ( ),
  .cfg_msg_received_assert_int_c              ( ),
  .cfg_msg_received_assert_int_d              ( ),
  .cfg_msg_received_deassert_int_a            ( ),
  .cfg_msg_received_deassert_int_b            ( ),
  .cfg_msg_received_deassert_int_c            ( ),
  .cfg_msg_received_deassert_int_d            ( ),

   .cfg_msg_received_pm_pme                   ( ), 
   .cfg_msg_received_setslotpowerlimit        ( ), 
  //----------------------------------------------------------------------------------------------------------------//
  // 5. Physical Layer Control and Status (PL) Interface                                                            //
  //----------------------------------------------------------------------------------------------------------------//
  .pl_directed_link_change                    ( pl_directed_link_change ),
  .pl_directed_link_width                     ( pl_directed_link_width ),
  .pl_directed_link_speed                     ( pl_directed_link_speed ),
  .pl_directed_link_auton                     ( pl_directed_link_auton ),
  .pl_upstream_prefer_deemph                  ( pl_upstream_prefer_deemph ),

  .pl_sel_lnk_rate                            (  ),
  .pl_sel_lnk_width                           (  ),
  .pl_ltssm_state                             (  ),
  .pl_lane_reversal_mode                      (  ),

  .pl_phy_lnk_up                              ( ),
  .pl_tx_pm_state                             ( ),
  .pl_rx_pm_state                             ( ),

  .pl_link_upcfg_cap                          ( ),
  .pl_link_gen2_cap                           ( ),
  .pl_link_partner_gen2_supported             ( ),
  .pl_initial_link_width                      ( ),

  .pl_directed_change_done                    ( ),

  //------------------------------------------------//
  // EP Only                                        //
  //------------------------------------------------//
  .pl_received_hot_rst                        (  ),

  //------------------------------------------------//
  // RP Only                                        //
  //------------------------------------------------//
  .pl_transmit_hot_rst                        ( 1'b0 ),
  .pl_downstream_deemph_source                ( 1'b0 ),

  //----------------------------------------------------------------------------------------------------------------//
  // 6. AER Interface                                                                                               //
  //----------------------------------------------------------------------------------------------------------------//

  .cfg_err_aer_headerlog                      ( cfg_err_aer_headerlog ),
  .cfg_aer_interrupt_msgnum                   ( cfg_aer_interrupt_msgnum ),
  .cfg_err_aer_headerlog_set                  ( ), 
  .cfg_aer_ecrc_check_en                      ( ), 
  .cfg_aer_ecrc_gen_en                        ( ), 

  //----------------------------------------------------------------------------------------------------------------//
  // 7. VC interface                                                                                                //
  //----------------------------------------------------------------------------------------------------------------//

  .cfg_vc_tcvc_map                            ( ),

  //----------------------------------------------------------------------------------------------------------------//
  // 8. System  (SYS) Interface                                                                                     //
  //----------------------------------------------------------------------------------------------------------------//

<: if {($ext_pipe_interface_string == "TRUE")} { :>
    .common_commands_in           ( common_commands_in  ), 
    .pipe_rx_0_sigs               ( pipe_rx_0_sigs      ), 
    .pipe_rx_1_sigs               ( pipe_rx_1_sigs      ), 
    .pipe_rx_2_sigs               ( pipe_rx_2_sigs      ), 
    .pipe_rx_3_sigs               ( pipe_rx_3_sigs      ), 
    .pipe_rx_4_sigs               ( pipe_rx_4_sigs      ), 
    .pipe_rx_5_sigs               ( pipe_rx_5_sigs      ), 
    .pipe_rx_6_sigs               ( pipe_rx_6_sigs      ), 
    .pipe_rx_7_sigs               ( pipe_rx_7_sigs      ), 
                                                       
    .common_commands_out          ( common_commands_out ), 
    .pipe_tx_0_sigs               ( pipe_tx_0_sigs      ), 
    .pipe_tx_1_sigs               ( pipe_tx_1_sigs      ), 
    .pipe_tx_2_sigs               ( pipe_tx_2_sigs      ), 
    .pipe_tx_3_sigs               ( pipe_tx_3_sigs      ), 
    .pipe_tx_4_sigs               ( pipe_tx_4_sigs      ), 
    .pipe_tx_5_sigs               ( pipe_tx_5_sigs      ), 
    .pipe_tx_6_sigs               ( pipe_tx_6_sigs      ), 
    .pipe_tx_7_sigs               ( pipe_tx_7_sigs      ), 
<: } else { :>
    .common_commands_in           ( 12'b0  ), 
    .pipe_rx_0_sigs               ( 25'b0  ), 
    .pipe_rx_1_sigs               ( 25'b0  ), 
    .pipe_rx_2_sigs               ( 25'b0  ), 
    .pipe_rx_3_sigs               ( 25'b0  ), 
    .pipe_rx_4_sigs               ( 25'b0  ), 
    .pipe_rx_5_sigs               ( 25'b0  ), 
    .pipe_rx_6_sigs               ( 25'b0  ), 
    .pipe_rx_7_sigs               ( 25'b0  ), 
                                                       
    .common_commands_out          (  ), 
    .pipe_tx_0_sigs               (  ), 
    .pipe_tx_1_sigs               (  ), 
    .pipe_tx_2_sigs               (  ), 
    .pipe_tx_3_sigs               (  ), 
    .pipe_tx_4_sigs               (  ), 
    .pipe_tx_5_sigs               (  ), 
    .pipe_tx_6_sigs               (  ), 
    .pipe_tx_7_sigs               (  ), 
<: } :>
  .pipe_mmcm_rst_n                ( 1'b1 ),        // Async      | Async
  .sys_clk                        ( sys_clk_p ),
  .sys_rst_n                      ( sys_rst_n_c )

);



pcie_app_7x  #(
  .C_DATA_WIDTH( C_DATA_WIDTH ),
  .TCQ( TCQ )

) app (

  //----------------------------------------------------------------------------------------------------------------//
  // 1. AXI-S Interface                                                                                             //
  //----------------------------------------------------------------------------------------------------------------//

  // Common
  .user_clk                       ( user_clk ),
  .user_reset                     ( user_reset_q ),
  .user_lnk_up                    ( user_lnk_up_q ),

  // Tx
  .s_axis_tx_tready               ( s_axis_tx_tready ),
  .s_axis_tx_tdata                ( s_axis_tx_tdata ),
  .s_axis_tx_tkeep                ( s_axis_tx_tkeep ),
  .s_axis_tx_tuser                ( s_axis_tx_tuser ),
  .s_axis_tx_tlast                ( s_axis_tx_tlast ),
  .s_axis_tx_tvalid               ( s_axis_tx_tvalid ),
  .tx_cfg_gnt                     ( tx_cfg_gnt ),

  // Rx
  .m_axis_rx_tdata                ( m_axis_rx_tdata ),
  .m_axis_rx_tkeep                ( m_axis_rx_tkeep ),
  .m_axis_rx_tlast                ( m_axis_rx_tlast ),
  .m_axis_rx_tvalid               ( m_axis_rx_tvalid ),
  .m_axis_rx_tready               ( m_axis_rx_tready ),
  .m_axis_rx_tuser                ( m_axis_rx_tuser ),
  .rx_np_ok                       ( rx_np_ok ),
  .rx_np_req                      ( rx_np_req ),

  // Flow Control
  .fc_sel                         ( fc_sel ),

  //----------------------------------------------------------------------------------------------------------------//
  // 2. Configuration (CFG) Interface                                                                               //
  //----------------------------------------------------------------------------------------------------------------//
  .cfg_err_cor                    ( cfg_err_cor ),
  .cfg_err_atomic_egress_blocked  ( cfg_err_atomic_egress_blocked ),
  .cfg_err_internal_cor           ( cfg_err_internal_cor ),
  .cfg_err_malformed              ( cfg_err_malformed ),
  .cfg_err_mc_blocked             ( cfg_err_mc_blocked ),
  .cfg_err_poisoned               ( cfg_err_poisoned ),
  .cfg_err_norecovery             ( cfg_err_norecovery ),
  .cfg_err_ur                     ( cfg_err_ur ),
  .cfg_err_ecrc                   ( cfg_err_ecrc ),
  .cfg_err_cpl_timeout            ( cfg_err_cpl_timeout ),
  .cfg_err_cpl_abort              ( cfg_err_cpl_abort ),
  .cfg_err_cpl_unexpect           ( cfg_err_cpl_unexpect ),
  .cfg_err_posted                 ( cfg_err_posted ),
  .cfg_err_locked                 ( cfg_err_locked ),
  .cfg_err_acs                    ( cfg_err_acs ), //1'b0 ),
  .cfg_err_internal_uncor         ( cfg_err_internal_uncor ), //1'b0 ),
  .cfg_err_tlp_cpl_header         ( cfg_err_tlp_cpl_header ),
  .cfg_interrupt                  ( cfg_interrupt ),
  .cfg_interrupt_assert           ( cfg_interrupt_assert ),
  .cfg_interrupt_di               ( cfg_interrupt_di ),
  .cfg_interrupt_stat             ( cfg_interrupt_stat ),
  .cfg_pciecap_interrupt_msgnum   ( cfg_pciecap_interrupt_msgnum ),
  .cfg_turnoff_ok                 ( cfg_turnoff_ok ),
  .cfg_to_turnoff                 ( cfg_to_turnoff ),

  .cfg_trn_pending                ( cfg_trn_pending ),
  .cfg_pm_halt_aspm_l0s           ( cfg_pm_halt_aspm_l0s ),
  .cfg_pm_halt_aspm_l1            ( cfg_pm_halt_aspm_l1 ),
  .cfg_pm_force_state_en          ( cfg_pm_force_state_en ),
  .cfg_pm_force_state             ( cfg_pm_force_state ),

  .cfg_pm_wake                    ( cfg_pm_wake ),
  .cfg_bus_number                 ( cfg_bus_number ),
  .cfg_device_number              ( cfg_device_number ),
  .cfg_function_number            ( cfg_function_number ),

  .cfg_dsn                        ( cfg_dsn ),

  //----------------------------------------------------------------------------------------------------------------//
  // 3. Management (MGMT) Interface                                                                                 //
  //----------------------------------------------------------------------------------------------------------------//
  .cfg_mgmt_di                    ( cfg_mgmt_di ),
  .cfg_mgmt_byte_en               ( cfg_mgmt_byte_en ),
  .cfg_mgmt_dwaddr                ( cfg_mgmt_dwaddr ),
  .cfg_mgmt_wr_en                 ( cfg_mgmt_wr_en ),
  .cfg_mgmt_rd_en                 ( cfg_mgmt_rd_en ),
  .cfg_mgmt_wr_readonly           ( cfg_mgmt_wr_readonly ),

  //----------------------------------------------------------------------------------------------------------------//
  // 3. Advanced Error Reporting (AER) Interface                                                                    //
  //----------------------------------------------------------------------------------------------------------------//
  .cfg_err_aer_headerlog          ( cfg_err_aer_headerlog ),
  .cfg_aer_interrupt_msgnum       ( cfg_aer_interrupt_msgnum ),

  //----------------------------------------------------------------------------------------------------------------//
  // 4. Physical Layer Control and Status (PL) Interface                                                            //
  //----------------------------------------------------------------------------------------------------------------//

  .pl_directed_link_auton         ( pl_directed_link_auton ),
  .pl_directed_link_change        ( pl_directed_link_change ),
  .pl_directed_link_speed         ( pl_directed_link_speed ),
  .pl_directed_link_width         ( pl_directed_link_width ),
  .pl_upstream_prefer_deemph      ( pl_upstream_prefer_deemph ),
  //below ports are instantiated to fix warnings
  .cfg_aer_ecrc_gen_en (),
  .cfg_aer_ecrc_check_en(),
  .cfg_err_aer_headerlog_set(),
  .pl_received_hot_rst(),
  .pl_lane_reversal_mode(),
  .pl_link_upcfg_cap(),
  .pl_initial_link_width(),
  .pl_link_partner_gen2_supported(),
  .pl_link_gen2_cap(),
  .pl_sel_lnk_rate(),
  .pl_sel_lnk_width(),
  .pl_ltssm_state(),
  .cfg_pcie_link_state(),
  .cfg_dcommand2(),
  .cfg_lcommand(),
  .cfg_lstatus(),
  .cfg_dcommand(),
  .cfg_dstatus(),
  .cfg_command(),
  .cfg_status(),
  .cfg_interrupt_msixfm(),
  .cfg_interrupt_msixenable(),
  .cfg_interrupt_msienable(),
  .cfg_interrupt_mmenable(),
  .cfg_interrupt_do(),
  .cfg_interrupt_rdy(),
  .cfg_err_cpl_rdy(),
  .fc_ph(),
  .fc_pd(),
  .fc_nph(),
  .fc_npd(),
  .fc_cplh(),
  .fc_cpld(),
  .tx_err_drop(),
  .tx_cfg_req(),
  .tx_buf_av()

);

endmodule


