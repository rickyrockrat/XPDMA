<#: ttcl/GetValueSimParam.ttcl :>
<: if {$ep} ttcl_return :>
<: setFileName  "board" :>
<: setFileExtension ".v" :>
<: setOutputDirectory [ttcl_string_concat $ComponentName "/simulation/functional"] :>
<#: ttcl/header.ttcl :>
///-----------------------------------------------------------------------------
//
// (c) Copyright 2010-2011 Xilinx, Inc. All rights reserved.
//
// This file contains confidential and proprietary information
// of Xilinx, Inc. and is protected under U.S. and
// international copyright and other intellectual property
// laws.
//
// DISCLAIMER
// This disclaimer is not a license and does not grant any
// rights to the materials distributed herewith. Except as
// otherwise provided in a valid license issued to you by
// Xilinx, and to the maximum extent permitted by applicable
// law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
// WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
// AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
// BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
// INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
// (2) Xilinx shall not be liable (whether in contract or tort,
// including negligence, or under any other theory of
// liability) for any loss or damage of any kind or nature
// related to, arising under or in connection with these
// materials, including for any direct, or any indirect,
// special, incidental, or consequential loss or damage
// (including loss of data, profits, goodwill, or any type of
// loss or damage suffered as a result of any action brought
// by a third party) even if such damage or loss was
// reasonably foreseeable or Xilinx had been advised of the
// possibility of the same.
//
// CRITICAL APPLICATIONS
// Xilinx products are not designed or intended to be fail-
// safe, or for use in any application requiring fail-safe
// performance, such as life-support or safety devices or
// systems, Class III medical devices, nuclear facilities,
// applications related to the deployment of airbags, or any
// other applications that could lead to death, personal
// injury, or severe property or environmental damage
// (individually and collectively, "Critical
// Applications"). Customer assumes the sole risk and
// liability of any use of Xilinx products in Critical
// Applications, subject only to applicable laws and
// regulations governing limitations on product liability.
//
// THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
// PART OF THIS FILE AT ALL TIMES.
//
//-----------------------------------------------------------------------------
// Project    : AXI Memory Mapped Bridge to PCI Express
// File       : board.v
// Version    : 2.7
// Description : Top-level testbench file
//
// Hierarchy   : board
//               |
//               |--xilinx_pcie_2_1_ep_7x
//               |  |
//               |  |--pcie_2_1_ep_7x
//               |  |  |
//               |  |  |--pcie_7x_0_pcie_top
//		 |  |  |--pcie_7x_0_gt_top
//               |  |
//               |  |--pcie_app_7x
//               |     |
//               |     |--PIO
//               |
//               |--xilinx_axi_pcie_rport_7x
//                  |
//		    |--axi_pcie_0/axi_pcie_0_support 
//                  |--axi_bram_cntrl
//		    |--maxi_model
//		    |--s_axi_ctl_model
//
//					|--axi_pcie_0 if PCIE_EXT_CLK & PCIE_EXT_GT_COMMON are FALSE
//						|
//						|--axi_pcie (axi pcie design)
//							|
//							|--<various>
//					|--axi_pcie_0_support If either of or both PCIE_EXT_CLK & PCIE_EXT_GT_COMMON are TRUE
//						|
//						|--ext_pipe_clk(external pipe clock)
//						|--ext_gt_common(external gt common)
//						|--axi_pcie_0
//							|
//							|--axi_pcie (axi pcie design)
//								|
//								|--<various>
//
//-----------------------------------------------------------------------------

`timescale 1ns/1ns

module board;

  parameter  REF_CLK_FREQ          = <=: print $pci_exp_ref_freq_int :>;
  localparam REF_CLK_HALF_CYCLE    = (REF_CLK_FREQ == 0) ? 5000 :
                                     (REF_CLK_FREQ == 1) ? 4000 :
                                     (REF_CLK_FREQ == 2) ? 2000 : 0;

  // RP Parameters
<: if {[ends_with $prj_fam "zynq"] && [starts_with $prj_spd_grd "-1"]} { :>
<: if {$max_lnk_wdt_int == 1 || ($max_lnk_wdt_int == 2 && $max_lnk_spd_int == 0)} { :>
<: if {$pcie_axi_if_wdt_int == 128}  { :>
  parameter USER_CLK_FREQ_EP           = 2;
<: } else { :>
  parameter USER_CLK_FREQ_EP           = 1;
<: } :>
<: } else { :>
<: if {$pcie_axi_if_wdt_int == 128}  { :>
  parameter USER_CLK_FREQ_EP           = 3;
<: } else { :>
  parameter USER_CLK_FREQ_EP           = 2;
<: } :>
<: } :>
<: } else { :>
<: if {$pcie_axi_if_wdt_int == 128}  { :>
  parameter USER_CLK_FREQ_RP           = 3;
<: } elseif {$max_lnk_spd_int == 0 && $max_lnk_wdt_int == 1}  { :>
  parameter USER_CLK_FREQ_RP           = 1; 
<: } else { :>
  parameter USER_CLK_FREQ_RP           = 2; 
<: } :>
<: } :>
<: if {$pcie_axi_if_wdt_int == 128}  { :>
  parameter USER_CLK2_DIV2_RP          = "TRUE";
<: } else { :>
  parameter USER_CLK2_DIV2_RP          = "FALSE";
<: } :>
  parameter LINK_CAP_MAX_LINK_WIDTH_RP = 6'h<=: expr {$max_lnk_wdt_int} :>;
  parameter PCIE_EXT_CLK_RP            = "<=: print $pcie_ext_clk_string :>";  // Use External Clocking Module
  parameter PCIE_EXT_GT_COMMON_RP      = "<=: print $pcie_ext_gt_common_string :>";
  parameter C_DATA_WIDTH_RP            = <=: print $pcie_axi_if_wdt_int :>;  // RX/TX interface data width

  // EP Parameters
<: if {$x1g2 || $x1g1 || $x2g1 || $x2g2 || $x4g1} {  :>
  parameter C_DATA_WIDTH_EP            = 64;
<: } else { :>
  parameter C_DATA_WIDTH_EP            = <=: print $pcie_axi_if_wdt_int :>;
<: } :>
<: if {$x1g2 || $x1g1 || $x2g1 || $x2g2 || $x4g1} {  :>
  parameter TRN_DW_EP                  = "FALSE";
<: } else { :>
  parameter TRN_DW_EP                  = "TRUE";
<: } :>
<: if {$x1g2} {  :>
  parameter USER_CLK_FREQ_EP           = 1;
<: } elseif {$x4g1} { :>
  parameter USER_CLK_FREQ_EP           = 2;
<: } elseif { $x4g2 || $x8g1 }  { :>
  parameter USER_CLK_FREQ_EP           = 3;
<: } elseif {$x8g2} { :>
  parameter USER_CLK_FREQ_EP           = 4;
<: } else { :>
  parameter USER_CLK_FREQ_EP           = <=: expr {$max_lnk_spd_int + 1} :>;
<: } :>  
<: if {$x4g2 || $x8g1 } {  :>
  parameter USER_CLK2_DIV2_EP          = "TRUE";
<: } else { :>
  parameter USER_CLK2_DIV2_EP          = "FALSE";
<: } :>
  parameter LINK_CAP_MAX_LINK_SPEED_EP = 4'h<=: expr {$max_lnk_spd_int + 1} :>;
  parameter LINK_CAP_MAX_LINK_WIDTH_EP = 6'h<=: expr {$max_lnk_wdt_int} :>;
  parameter LINK_CTRL2_TARGET_LINK_SPEED_EP = 4'h<=: expr {$max_lnk_spd_int + 1} :>;

  // System-level clock and reset
  wire               sys_clk;
  reg                sys_rst_n;

<: if {($ext_pipe_interface_string == "TRUE")} { :>
defparam board.EP.ep.EXT_PIPE_INTERFACE = "TRUE";
defparam board.EP.ep.EXT_PIPE_SIM       = "TRUE";
<: } :>


<: if {($ext_pipe_interface_string == "TRUE")} { :>
//
// PIPE PORTS to TOP Level For PIPE SIMULATION with 3rd Party IP/BFM/Xilinx BFM
//
    wire  [11:0]  common_commands_out;
    wire  [24:0]  xil_tx0_sigs_ep;
    wire  [24:0]  xil_tx1_sigs_ep;
    wire  [24:0]  xil_tx2_sigs_ep;
    wire  [24:0]  xil_tx3_sigs_ep;
    wire  [24:0]  xil_tx4_sigs_ep;
    wire  [24:0]  xil_tx5_sigs_ep;
    wire  [24:0]  xil_tx6_sigs_ep;
    wire  [24:0]  xil_tx7_sigs_ep;
  
    wire  [24:0]  xil_rx0_sigs_rp;
    wire  [24:0]  xil_rx1_sigs_rp;
    wire  [24:0]  xil_rx2_sigs_rp;
    wire  [24:0]  xil_rx3_sigs_rp;
    wire  [24:0]  xil_rx4_sigs_rp;
    wire  [24:0]  xil_rx5_sigs_rp;
    wire  [24:0]  xil_rx6_sigs_rp;
    wire  [24:0]  xil_rx7_sigs_rp;

  
    wire  [24:0]  xil_tx0_sigs_rp;
    wire  [24:0]  xil_tx1_sigs_rp;
    wire  [24:0]  xil_tx2_sigs_rp;
    wire  [24:0]  xil_tx3_sigs_rp;
    wire  [24:0]  xil_tx4_sigs_rp;
    wire  [24:0]  xil_tx5_sigs_rp;
    wire  [24:0]  xil_tx6_sigs_rp;
    wire  [24:0]  xil_tx7_sigs_rp;

<: } else { :>    
      // PCI-Express Serial Interconnect
  wire  [<=: expr {$max_lnk_wdt_int - 1} :>:0]  ep_pci_exp_txn;
  wire  [<=: expr {$max_lnk_wdt_int - 1} :>:0]  ep_pci_exp_txp;
  wire  [<=: expr {$max_lnk_wdt_int - 1} :>:0]  rp_pci_exp_txn;
  wire  [<=: expr {$max_lnk_wdt_int - 1} :>:0]  rp_pci_exp_txp;
<: } :>  

  //
  // Generate system-level reference clock
  //
  sys_clk_gen
  #(
    .halfcycle (REF_CLK_HALF_CYCLE),
    .offset    (0)
  ) CLK_GEN (
    .sys_clk (sys_clk)
  );

  //------------------------------------------------------------------------------//
  // Generate system-level reset
  //------------------------------------------------------------------------------//
  initial begin
    $display("[%t] : System Reset Asserted...", $realtime);
    sys_rst_n = 1'b0;
    repeat (500) @(posedge sys_clk);
    $display("[%t] : System Reset De-asserted...", $realtime);
    sys_rst_n = 1'b1;
  end
  //------------------------------------------------------------------------------//
  initial begin
    #2500000;  // 200us timeout
    $display("[%t] : Simulation timeout. TEST FAILED", $realtime);
    #100;
    $finish;
  end
  //------------------------------------------------------------------------------//
 
  //
  // PCI-Express Root Port FPGA Instantiation
  //
  xilinx_axi_pcie_rport_7x XILINX_AXIPCIE_RP (

    // Reference clock
    .sys_clk_p           ( sys_clk                ),
    .sys_clk_n           ( ~sys_clk               ),


    .sys_rst_n           ( sys_rst_n              ),

<: if {($ext_pipe_interface_string == "TRUE")} { :>
    .common_commands_in (),
    .pipe_rx_0_sigs     (xil_rx0_sigs_rp),    
    .pipe_rx_1_sigs     (xil_rx1_sigs_rp),
    .pipe_rx_2_sigs     (xil_rx2_sigs_rp),
    .pipe_rx_3_sigs     (xil_rx3_sigs_rp),
    .pipe_rx_4_sigs     (xil_rx4_sigs_rp),
    .pipe_rx_5_sigs     (xil_rx5_sigs_rp),
    .pipe_rx_6_sigs     (xil_rx6_sigs_rp),
    .pipe_rx_7_sigs     (xil_rx7_sigs_rp),
    .common_commands_out(common_commands_out),
    .pipe_tx_0_sigs     (xil_tx0_sigs_rp),
    .pipe_tx_1_sigs     (xil_tx1_sigs_rp),
    .pipe_tx_2_sigs     (xil_tx2_sigs_rp),
    .pipe_tx_3_sigs     (xil_tx3_sigs_rp),
    .pipe_tx_4_sigs     (xil_tx4_sigs_rp),
    .pipe_tx_5_sigs     (xil_tx5_sigs_rp),
    .pipe_tx_6_sigs     (xil_tx6_sigs_rp),
    .pipe_tx_7_sigs     (xil_tx7_sigs_rp)

<: } else { :>

    // PCI Express interface
    .pci_exp_rxn         ( ep_pci_exp_txn         ),
    .pci_exp_rxp         ( ep_pci_exp_txp         ),
    .pci_exp_txn         ( rp_pci_exp_txn         ),
    .pci_exp_txp         ( rp_pci_exp_txp         )
<: } :>
  );

  //
  // Simulation endpoint with CSL
  //
  xilinx_pcie_2_1_ep_7x
  #(
    .REF_CLK_FREQ(REF_CLK_FREQ),
    .PL_FAST_TRAIN                  ( "TRUE"                          ),
    .ALLOW_X8_GEN2                  ( "FALSE"                         ),
    .C_DATA_WIDTH                   ( C_DATA_WIDTH_EP                 ),
    .LINK_CAP_MAX_LINK_WIDTH        ( LINK_CAP_MAX_LINK_WIDTH_EP      ),
    .DEVICE_ID                      ( 16'h7100                        ),
    .LINK_CAP_MAX_LINK_SPEED        ( LINK_CAP_MAX_LINK_SPEED_EP      ),
    .LINK_CTRL2_TARGET_LINK_SPEED   ( LINK_CTRL2_TARGET_LINK_SPEED_EP ),
    .DEV_CAP_MAX_PAYLOAD_SUPPORTED  ( 1                               ),
    .USER_CLK_FREQ                  ( USER_CLK_FREQ_EP                ),
    .USER_CLK2_DIV2                 ( USER_CLK2_DIV2_EP               ),
    .TRN_DW                         ( TRN_DW_EP                       ),
    .VC0_TX_LASTPACKET              ( 29                              ),
    .VC0_RX_RAM_LIMIT               ( 13'h7FF                         ),
    .VC0_CPL_INFINITE               ( "TRUE"                          ),
    .VC0_TOTAL_CREDITS_PD           ( 437                             ),
    .VC0_TOTAL_CREDITS_CD           ( 461                             )
  )
  EP (
      .pci_exp_txp                  ( ep_pci_exp_txp         ),
      .pci_exp_txn                  ( ep_pci_exp_txn         ),
      .pci_exp_rxp                  ( rp_pci_exp_txp         ),
      .pci_exp_rxn                  ( rp_pci_exp_txn         ),

<: if {($ext_pipe_interface_string == "TRUE")} { :>
     .common_commands_in ({11'b0,common_commands_out[0]} ), // pipe_clk from RP
     .pipe_rx_0_sigs     ({2'b0,xil_tx0_sigs_rp[22:0]}),
     .pipe_rx_1_sigs     ({2'b0,xil_tx1_sigs_rp[22:0]}),
     .pipe_rx_2_sigs     ({2'b0,xil_tx2_sigs_rp[22:0]}),
     .pipe_rx_3_sigs     ({2'b0,xil_tx3_sigs_rp[22:0]}),
     .pipe_rx_4_sigs     ({2'b0,xil_tx4_sigs_rp[22:0]}),
     .pipe_rx_5_sigs     ({2'b0,xil_tx5_sigs_rp[22:0]}),
     .pipe_rx_6_sigs     ({2'b0,xil_tx6_sigs_rp[22:0]}),
     .pipe_rx_7_sigs     ({2'b0,xil_tx7_sigs_rp[22:0]}),
     .common_commands_out(),

     .pipe_tx_0_sigs     (xil_tx0_sigs_ep),
     .pipe_tx_1_sigs     (xil_tx1_sigs_ep),
     .pipe_tx_2_sigs     (xil_tx2_sigs_ep),
     .pipe_tx_3_sigs     (xil_tx3_sigs_ep),
     .pipe_tx_4_sigs     (xil_tx4_sigs_ep),
     .pipe_tx_5_sigs     (xil_tx5_sigs_ep),
     .pipe_tx_6_sigs     (xil_tx6_sigs_ep),
     .pipe_tx_7_sigs     (xil_tx7_sigs_ep),

<: } :>
      .sys_rst_n(sys_rst_n),
      .sys_clk_p                    ( sys_clk                ),
      .sys_clk_n                    ( ~sys_clk               )
  );

<: if {($ext_pipe_interface_string == "TRUE")} { :>
     assign xil_rx0_sigs_rp  = {2'b0,xil_tx0_sigs_ep[22:0]};
     assign xil_rx1_sigs_rp  = {2'b0,xil_tx1_sigs_ep[22:0]};
     assign xil_rx2_sigs_rp  = {2'b0,xil_tx2_sigs_ep[22:0]};
     assign xil_rx3_sigs_rp  = {2'b0,xil_tx3_sigs_ep[22:0]};
     assign xil_rx4_sigs_rp  = {2'b0,xil_tx4_sigs_ep[22:0]};
     assign xil_rx5_sigs_rp  = {2'b0,xil_tx5_sigs_ep[22:0]};
     assign xil_rx6_sigs_rp  = {2'b0,xil_tx6_sigs_ep[22:0]};
     assign xil_rx7_sigs_rp  = {2'b0,xil_tx7_sigs_ep[22:0]}; 

  //------------------------------------------------------------------------------//
  // Simulation with BFM (comment out the Simulation Root Port Model)
  //------------------------------------------------------------------------------//
  //
  // PCI-Express use case with BFM Instance
  //
  //-----------------------------------------------------------------------------
  //-- Description:  Pipe Mode Interface
  //-- 16bit data for Gen1 rate @ Pipe Clk 125 
  //-- 16bit data for Gen2 rate @ Pipe Clk 250
  //-- 32bit data for Gen3 rate @ Pipe Clk 250  
  //-- For Gen1/Gen2 use case, tie-off rx*_start_block, rx*_data_valid, rx*_syncheader & rx*_data[31:16]
  //-- Pipe Clk is provided as output of this module - All pipe signals need to be aligned to provided Pipe Clk
  //-- pipe_tx_rate (00 - Gen1, 01 -Gen2 & 10- Gen3)
  //-- Rcvr Detect is handled internally by the core (Rcvr Detect Bypassed)
  //-- RX Status and PHY Status are handled internally (speed change & rcvr detect )
  //-- Phase2/3 needs to be disabled 
  //-- LF & FS values are 40 & 12 decimal
  //-- RP should provide TX preset hint of 5 (in EQ TS2's before changing rate to Gen3)
  //-----------------------------------------------------------------------------
  /*
   xil_sig2pipe xil_dut_pipe (
 
     .xil_rx0_sigs(xil_rx0_sigs_rp),
     .xil_rx1_sigs(xil_rx1_sigs_rp),
     .xil_rx2_sigs(xil_rx2_sigs_rp),
     .xil_rx3_sigs(xil_rx3_sigs_rp),
     .xil_rx4_sigs(xil_rx4_sigs_rp),
     .xil_rx5_sigs(xil_rx5_sigs_rp),
     .xil_rx6_sigs(xil_rx6_sigs_rp),
     .xil_rx7_sigs(xil_rx7_sigs_rp),
     .xil_common_commands(common_commands_out),
     .xil_tx0_sigs(xil_tx0_sigs_rp),
     .xil_tx1_sigs(xil_tx0_sigs_rp),
     .xil_tx2_sigs(xil_tx0_sigs_rp),
     .xil_tx3_sigs(xil_tx0_sigs_rp),
     .xil_tx4_sigs(xil_tx0_sigs_rp),
     .xil_tx5_sigs(xil_tx0_sigs_rp),
     .xil_tx6_sigs(xil_tx0_sigs_rp),
     .xil_tx7_sigs(xil_tx0_sigs_rp),
      ///////////// do not modify above this line //////////
      //////////Connect the following pipe ports to BFM///////////////
     .pipe_clk(),               // input to BFM  (pipe clock output)                 
     .pipe_tx_rate(),           // input to BFM  (rate)
     .pipe_tx_detect_rx(),      // input to BFM  (Receiver Detect)  
     .pipe_tx_powerdown(),      // input to BFM  (Powerdown)  
      // Pipe TX Interface
     .pipe_tx0_data(),          // input to BFM
     .pipe_tx1_data(),          // input to BFM
     .pipe_tx2_data(),          // input to BFM
     .pipe_tx3_data(),          // input to BFM
     .pipe_tx4_data(),          // input to BFM
     .pipe_tx5_data(),          // input to BFM
     .pipe_tx6_data(),          // input to BFM
     .pipe_tx7_data(),          // input to BFM
     .pipe_tx0_char_is_k(),     // input to BFM
     .pipe_tx1_char_is_k(),     // input to BFM
     .pipe_tx2_char_is_k(),     // input to BFM
     .pipe_tx3_char_is_k(),     // input to BFM
     .pipe_tx4_char_is_k(),     // input to BFM
     .pipe_tx5_char_is_k(),     // input to BFM
     .pipe_tx6_char_is_k(),     // input to BFM
     .pipe_tx7_char_is_k(),     // input to BFM
     .pipe_tx0_elec_idle(),     // input to BFM
     .pipe_tx1_elec_idle(),     // input to BFM
     .pipe_tx2_elec_idle(),     // input to BFM
     .pipe_tx3_elec_idle(),     // input to BFM
     .pipe_tx4_elec_idle(),     // input to BFM
     .pipe_tx5_elec_idle(),     // input to BFM
     .pipe_tx6_elec_idle(),     // input to BFM
     .pipe_tx7_elec_idle(),     // input to BFM
     .pipe_tx0_start_block(),   // input to BFM
     .pipe_tx1_start_block(),   // input to BFM
     .pipe_tx2_start_block(),   // input to BFM
     .pipe_tx3_start_block(),   // input to BFM
     .pipe_tx4_start_block(),   // input to BFM
     .pipe_tx5_start_block(),   // input to BFM
     .pipe_tx6_start_block(),   // input to BFM
     .pipe_tx7_start_block(),   // input to BFM
     .pipe_tx0_syncheader(),    // input to BFM
     .pipe_tx1_syncheader(),    // input to BFM
     .pipe_tx2_syncheader(),    // input to BFM
     .pipe_tx3_syncheader(),    // input to BFM
     .pipe_tx4_syncheader(),    // input to BFM
     .pipe_tx5_syncheader(),    // input to BFM
     .pipe_tx6_syncheader(),    // input to BFM
     .pipe_tx7_syncheader(),    // input to BFM
     .pipe_tx0_data_valid(),    // input to BFM
     .pipe_tx1_data_valid(),    // input to BFM
     .pipe_tx2_data_valid(),    // input to BFM
     .pipe_tx3_data_valid(),    // input to BFM
     .pipe_tx4_data_valid(),    // input to BFM
     .pipe_tx5_data_valid(),    // input to BFM
     .pipe_tx6_data_valid(),    // input to BFM
     .pipe_tx7_data_valid(),    // input to BFM
     // Pipe RX Interface
     .pipe_rx0_data(),          // output of BFM
     .pipe_rx1_data(),          // output of BFM
     .pipe_rx2_data(),          // output of BFM
     .pipe_rx3_data(),          // output of BFM
     .pipe_rx4_data(),          // output of BFM
     .pipe_rx5_data(),          // output of BFM
     .pipe_rx6_data(),          // output of BFM
     .pipe_rx7_data(),          // output of BFM
     .pipe_rx0_char_is_k(),     // output of BFM
     .pipe_rx1_char_is_k(),     // output of BFM
     .pipe_rx2_char_is_k(),     // output of BFM
     .pipe_rx3_char_is_k(),     // output of BFM
     .pipe_rx4_char_is_k(),     // output of BFM
     .pipe_rx5_char_is_k(),     // output of BFM
     .pipe_rx6_char_is_k(),     // output of BFM
     .pipe_rx7_char_is_k(),     // output of BFM
     .pipe_rx0_elec_idle(),     // output of BFM
     .pipe_rx1_elec_idle(),     // output of BFM
     .pipe_rx2_elec_idle(),     // output of BFM
     .pipe_rx3_elec_idle(),     // output of BFM
     .pipe_rx4_elec_idle(),     // output of BFM
     .pipe_rx5_elec_idle(),     // output of BFM
     .pipe_rx6_elec_idle(),     // output of BFM
     .pipe_rx7_elec_idle(),     // output of BFM
     .pipe_rx0_start_block(),   // output of BFM
     .pipe_rx1_start_block(),   // output of BFM
     .pipe_rx2_start_block(),   // output of BFM
     .pipe_rx3_start_block(),   // output of BFM
     .pipe_rx4_start_block(),   // output of BFM
     .pipe_rx5_start_block(),   // output of BFM
     .pipe_rx6_start_block(),   // output of BFM
     .pipe_rx7_start_block(),   // output of BFM
     .pipe_rx0_syncheader(),    // output of BFM
     .pipe_rx1_syncheader(),    // output of BFM
     .pipe_rx2_syncheader(),    // output of BFM
     .pipe_rx3_syncheader(),    // output of BFM
     .pipe_rx4_syncheader(),    // output of BFM
     .pipe_rx5_syncheader(),    // output of BFM
     .pipe_rx6_syncheader(),    // output of BFM
     .pipe_rx7_syncheader(),    // output of BFM
     .pipe_rx0_data_valid(),    // output of BFM
     .pipe_rx1_data_valid(),    // output of BFM
     .pipe_rx2_data_valid(),    // output of BFM
     .pipe_rx3_data_valid(),    // output of BFM
     .pipe_rx4_data_valid(),    // output of BFM
     .pipe_rx5_data_valid(),    // output of BFM
     .pipe_rx6_data_valid(),    // output of BFM
     .pipe_rx7_data_valid()     // output of BFM
);
*/
<: } :>


  wire cfg_speed_g1;
  wire cfg_speed_g2;
  wire [3:0] cfg_width_h;

  assign cfg_speed_g1 = ~XILINX_AXIPCIE_RP.S_AXI_CTL.cfg_link_rate;
  assign cfg_speed_g2 =  XILINX_AXIPCIE_RP.S_AXI_CTL.cfg_link_rate;

  assign cfg_width_h = (XILINX_AXIPCIE_RP.S_AXI_CTL.cfg_link_width == 2'b11) ? 4'b1000 : ((XILINX_AXIPCIE_RP.S_AXI_CTL.cfg_link_width == 2'b10) ? 4'b0100 : ((XILINX_AXIPCIE_RP.S_AXI_CTL.cfg_link_width == 2'b01) ? 4'b0010 : 4'b0001));
  //------------------------------------------------------------------------------//
initial begin
    @(posedge XILINX_AXIPCIE_RP.S_AXI_CTL.user_link_up);
    $display("[%t] : Link Is UP...!", $realtime);
    $display("[%t] : Configuration Started.....!", $realtime);
    @(posedge XILINX_AXIPCIE_RP.S_AXI_CTL.configs_completed);
    $display("[%t] : Configuration Completed...!", $realtime);
    $display("[%t] : MEM Write Issued.....!", $realtime);
    @(posedge XILINX_AXIPCIE_RP.S_AXI.trans_m_axi_wvalid);
    $display("[%t] : Write Data Is : 32'h%X", $realtime, board.XILINX_AXIPCIE_RP.S_AXI.trans_m_axi_wdata[31:0]);
    $display("[%t] : MEM Read Issued......!", $realtime);    
    @(posedge XILINX_AXIPCIE_RP.S_AXI.trans_m_axi_rvalid);
    @(negedge XILINX_AXIPCIE_RP.S_AXI.trans_m_axi_rready);
    $display("[%t] : Read Data Is : 32'h%X", $realtime, board.XILINX_AXIPCIE_RP.S_AXI.READ_DATA);    
    $display("[%t] : Link UP Details...........!", $realtime);
    $display("[%t] : Link Speed - Trained to G2[%x] - G1[%x] ", $realtime, cfg_speed_g2, cfg_speed_g1);
    $display("[%t] : Link Width - Trained to x%x", $realtime, cfg_width_h);
    #100;
end
  //------------------------------------------------------------------------------//
initial begin
    @(posedge XILINX_AXIPCIE_RP.S_AXI_CTL.user_link_up);
    @(posedge XILINX_AXIPCIE_RP.S_AXI_CTL.configs_completed);
    @(posedge XILINX_AXIPCIE_RP.S_AXI.pio_test_completed);
     $display("[%t] : Test Completed Successfully",$realtime);
    #100;
    $finish;
end
  //------------------------------------------------------------------------------//
initial begin
    @(posedge XILINX_AXIPCIE_RP.S_AXI_CTL.user_link_up);
    @(posedge XILINX_AXIPCIE_RP.S_AXI_CTL.configs_completed);
    @(posedge XILINX_AXIPCIE_RP.S_AXI.pio_test_failed);
    $display("[%t] : Test FAILED --- Data Error Mismatch",$realtime);
    #100;
    $finish;
end
  //------------------------------------------------------------------------------//
initial begin

  if ($test$plusargs ("dump_all")) begin

`ifdef NCV // Cadence TRN dump

    $recordsetup("design=board",
                 "compress",
                 "wrapsize=100M",
                 "version=1",
                 "run=1");
    $recordvars();

`elsif VCS //Synopsys VPD dump

    $vcdplusfile("board.vpd");
    $vcdpluson;
    $vcdplusglitchon;
    $vcdplusflush;

`else

    // Verilog VC dump
    $dumpfile("board.vcd");
    $dumpvars(0, board);

`endif

  end

end


endmodule // BOARD
